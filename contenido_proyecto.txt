INFORME DETALLADO DEL PROYECTO

Directorio: .
================================================================================

Archivo: .\.ninja_deps (omitido, extensión no relevante)
################################################################################

Archivo: .\.ninja_log (omitido, extensión no relevante)
################################################################################

Archivo: .\build.ninja (omitido, extensión no relevante)
################################################################################

Archivo: .\build.ninja.tmp6c625 (omitido, extensión no relevante)
################################################################################

Archivo: .\CarmenSandiego.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\carmen_sandiego.db (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 29376 bytes, Líneas: 919
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}

################################################################################

Archivo: .\CMakeLists.txt
Extensión: .txt, Tamaño: 2111 bytes, Líneas: 65
Contenido (primeros 100000 caracteres):
cmake_minimum_required(VERSION 3.10)
project(CarmenSandiego VERSION 1.0.0)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Dependencies
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTKMM REQUIRED gtkmm-4.0)
pkg_check_modules(SQLITE3 REQUIRED sqlite3)

# Include directories
include_directories(
    ${GTKMM_INCLUDE_DIRS}       # gtkmm include directories
    ${SQLITE3_INCLUDE_DIRS}      # sqlite3 include directories
    "${CMAKE_SOURCE_DIR}/include" # Header files directory in the project
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/core
    ${CMAKE_SOURCE_DIR}/ui    # Añadir la ruta a la carpeta 'ui'
    ${CMAKE_SOURCE_DIR}/Multimedia
)

# Link directories for libraries
link_directories(
    ${GTKMM_LIBRARY_DIRS}        # gtkmm library directories
    ${SQLITE3_LIBRARY_DIRS}       # sqlite3 library directories
)

# Add source files to the executable
add_executable(CarmenSandiego
    src/CarmenSandiegoApp.cpp
    src/game_logic.cpp
    src/DatabaseHandler.cpp
    src/main.cpp
    core/PistaDAO.cpp
    core/SecuazDAO.cpp
    Multimedia/MultimediaHandler.cpp  # Multimedia handler
)

# Link libraries to the executable
target_link_libraries(CarmenSandiego
    ${GTKMM_LIBRARIES}
    ${SQLITE3_LIBRARIES}
)

# Add extra compiler flags if necessary (optional optimization)
target_compile_options(CarmenSandiego PRIVATE -Wall -Wextra -pedantic)

# Optional packaging configuration
include(InstallRequiredSystemLibraries)
set(CPACK_PACKAGE_NAME "CarmenSandiego")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Juego de Carmen Sandiego")
set(CPACK_PACKAGE_VENDOR "TuNombre")
set(CPACK_PACKAGE_CONTACT "correo@tudominio.com")
set(CPACK_SYSTEM_NAME "x64")
set(CPACK_PACKAGE_EXECUTABLES "CarmenSandiego" "CarmenSandiego Game")
set(CPACK_GENERATOR "ZIP;TGZ")
include(CPack)

# Ensuring paths for mingw64
include_directories("H:/TALLER UNO I/T1/mingw64/include")
link_directories("H:/TALLER UNO I/T1/mingw64/lib")

################################################################################

Archivo: .\cmake_install.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake_install.cmake.tmpd122a (omitido, extensión no relevante)
################################################################################

Archivo: .\contenido_proyecto.txt
Extensión: .txt, Tamaño: 30521 bytes, Líneas: 946
Contenido (primeros 100000 caracteres):
INFORME DETALLADO DEL PROYECTO

Directorio: .
================================================================================

Archivo: .\.ninja_deps (omitido, extensión no relevante)
################################################################################

Archivo: .\.ninja_log (omitido, extensión no relevante)
################################################################################

Archivo: .\build.ninja (omitido, extensión no relevante)
################################################################################

Archivo: .\build.ninja.tmp6c625 (omitido, extensión no relevante)
################################################################################

Archivo: .\CarmenSandiego.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\carmen_sandiego.db (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 29376 bytes, Líneas: 919
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}


################################################################################

Archivo: .\CPackConfig.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CPackSourceConfig.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\estructura.txt
Extensión: .txt, Tamaño: 13572 bytes, Líneas: 354
Contenido (primeros 100000 caracteres):
Estructura de directorios:
├── .cmake
│   └── api
│       └── v1
│           ├── query
│           │   ├── cache-v2
│           │   ├── cmakeFiles-v1
│           │   ├── codemodel-v2
│           │   └── toolchains-v1
│           └── reply
│               ├── cache-v2-6ade88afea3dac0a5b60.json
│               ├── cmakeFiles-v1-5960018119144a825fce.json
│               ├── codemodel-v2-84e93c0c6f49cfa52fe8.json
│               ├── directory-.-Debug-d0094a50bb2071803777.json
│               ├── index-2024-10-17T18-11-50-0765.json
│               ├── target-CarmenSandiego-Debug-0902410e724609e95410.json
│               ├── target-new_target-Debug-23bfc7cded900e7ca501.json
│               └── toolchains-v1-0fe24d3b27174199f74f.json
├── .idea
│   ├── .name
│   ├── editor.xml
│   ├── misc.xml
│   ├── modules.xml
│   ├── proyecto_alpha.iml
│   ├── vcs.xml
│   └── workspace.xml
├── .ninja_deps
├── .ninja_log
├── CMakeCXXCompilerId.cpp
├── CMakeFiles
│   ├── 3.29.6
│   │   ├── CMakeCCompiler.cmake
│   │   ├── CMakeCCompiler.cmake.tmp
│   │   ├── CMakeCXXCompiler.cmake
│   │   ├── CMakeDetermineCompilerABI_C.bin
│   │   ├── CMakeRCCompiler.cmake
│   │   ├── CMakeSystem.cmake
│   │   ├── CompilerIdC
│   │   │   ├── CMakeCCompilerId.c
│   │   │   ├── a.exe
│   │   │   └── tmp
│   │   └── CompilerIdCXX
│   │       ├── CMakeCXXCompilerId.cpp
│   │       ├── a.exe
│   │       └── tmp
│   ├── 3.30.3
│   │   ├── CMakeCCompiler.cmake
│   │   ├── CMakeCXXCompiler.cmake
│   │   ├── CMakeDetermineCompilerABI_C.bin
│   │   ├── CMakeDetermineCompilerABI_CXX.bin
│   │   ├── CMakeRCCompiler.cmake
│   │   ├── CMakeSystem.cmake
│   │   ├── CompilerIdC
│   │   │   ├── CMakeCCompilerId.c
│   │   │   ├── a.exe
│   │   │   └── tmp
│   │   └── CompilerIdCXX
│   │       ├── CMakeCXXCompilerId.cpp
│   │       ├── a.exe
│   │       └── tmp
│   ├── CMakeConfigureLog.yaml
│   ├── CarmenSandiego.dir
│   │   ├── core
│   │   └── src
│   │       ├── database.cpp.obj
│   │       └── multimedia.cpp.obj
│   ├── TargetDirectories.txt
│   ├── clion-environment.txt
│   ├── cmake.check_cache
│   ├── new_target.dir
│   │   └── core
│   ├── pkgRedirects
│   ├── rules.ninja
│   └── rules.ninja.tmp76ec7
├── CMakeLists.txt
├── CPackConfig.cmake
├── CPackSourceConfig.cmake
├── CarmenSandiego.exe
├── Multimedia
│   ├── Betosecreto.png
│   ├── CSD.mp3
│   ├── CSD.png
│   ├── DetectiveEficiente.png
│   ├── DetectiveExperto.png
│   ├── DetectiveJunior.png
│   ├── DetectiveSenior.png
│   ├── EllaBella.png
│   ├── Inspector.png
│   ├── Medallafinal.png
│   ├── Mindy Ana Son.png
│   ├── Moonabomber.png
│   └── MultimediaHandler.cpp
├── PROYECT.rar
├── README.md
├── Testing
│   └── Temporary
│       └── LastTest.log
├── build.ninja
├── build.ninja.tmp6c625
├── carmen_sandiego.db
├── cmake-build-debug
│   ├── .cmake
│   │   └── api
│   │       └── v1
│   │           ├── query
│   │           │   ├── cache-v2
│   │           │   ├── cmakeFiles-v1
│   │           │   ├── codemodel-v2
│   │           │   └── toolchains-v1
│   │           └── reply
│   │               ├── cache-v2-ab4cab653ea5dec4289a.json
│   │               ├── cmakeFiles-v1-6f8153f958c4d0903b60.json
│   │               ├── codemodel-v2-3e6f31acc87ca370f85a.json
│   │               ├── directory-.-Debug-d0094a50bb2071803777.json
│   │               ├── index-2024-10-17T14-12-51-0232.json
│   │               ├── target-CarmenSandiego-Debug-bc673506eca6ac057bbd.json
│   │               └── toolchains-v1-2880cbcb8de12442f708.json
│   ├── CMakeCache.txt
│   ├── CMakeCache.txt.tmp88c38
│   ├── CMakeFiles
│   │   ├── 3.29.6
│   │   │   ├── CMakeCCompiler.cmake
│   │   │   ├── CMakeCXXCompiler.cmake
│   │   │   ├── CMakeDetermineCompilerABI_C.bin
│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin
│   │   │   ├── CMakeRCCompiler.cmake
│   │   │   ├── CMakeSystem.cmake
│   │   │   ├── CompilerIdC
│   │   │   │   ├── CMakeCCompilerId.c
│   │   │   │   ├── a.exe
│   │   │   │   └── tmp
│   │   │   └── CompilerIdCXX
│   │   │       ├── CMakeCXXCompilerId.cpp
│   │   │       ├── a.exe
│   │   │       └── tmp
│   │   ├── CMakeConfigureLog.yaml
│   │   ├── CMakeDirectoryInformation.cmake
│   │   ├── CarmenSandiego.dir
│   │   │   ├── DependInfo.cmake
│   │   │   ├── DependInfo.cmake.tmp176fb
│   │   │   ├── build.make
│   │   │   ├── build.make.tmp6d211
│   │   │   ├── cmake_clean.cmake
│   │   │   ├── compiler_depend.make
│   │   │   ├── compiler_depend.ts
│   │   │   ├── depend.make
│   │   │   ├── flags.make
│   │   │   ├── flags.make.tmpe2d55
│   │   │   ├── includes_CXX.rsp
│   │   │   ├── link.txt
│   │   │   ├── linkLibs.rsp
│   │   │   ├── objects1.rsp
│   │   │   ├── progress.make
│   │   │   └── src
│   │   ├── Makefile.cmake
│   │   ├── Makefile2
│   │   ├── TargetDirectories.txt
│   │   ├── clion-Debug-log.txt
│   │   ├── clion-environment.txt
│   │   ├── cmake.check_cache
│   │   ├── new_target.dir
│   │   │   ├── DependInfo.cmake
│   │   │   ├── build.make
│   │   │   ├── cmake_clean.cmake
│   │   │   ├── compiler_depend.make
│   │   │   ├── compiler_depend.ts
│   │   │   ├── depend.make
│   │   │   ├── flags.make
│   │   │   ├── includes_CXX.rsp
│   │   │   ├── link.txt
│   │   │   ├── linkLibs.rsp
│   │   │   ├── objects1.rsp
│   │   │   ├── progress.make
│   │   │   └── src
│   │   ├── pkgRedirects
│   │   └── progress.marks
│   ├── CPackConfig.cmake
│   ├── CPackSourceConfig.cmake
│   ├── Makefile
│   └── cmake_install.cmake
├── cmake-build-maker
│   ├── .cmake
│   │   └── api
│   │       └── v1
│   │           ├── query
│   │           │   ├── cache-v2
│   │           │   ├── cmakeFiles-v1
│   │           │   ├── codemodel-v2
│   │           │   └── toolchains-v1
│   │           └── reply
│   │               ├── cache-v2-6734288d51683422012f.json
│   │               ├── cmakeFiles-v1-f7c27fb66474498097bb.json
│   │               ├── codemodel-v2-e1161075f8149fcb2d11.json
│   │               ├── directory-.-Debug-d0094a50bb2071803777.json
│   │               ├── index-2024-10-18T22-34-07-0378.json
│   │               ├── target-CarmenSandiego-Debug-81ea5f7b70b7ce26560f.json
│   │               └── toolchains-v1-2880cbcb8de12442f708.json
│   ├── .ninja_deps
│   ├── .ninja_log
│   ├── CMakeCache.txt
│   ├── CMakeFiles
│   │   ├── 3.30.5
│   │   │   ├── CMakeCCompiler.cmake
│   │   │   ├── CMakeCXXCompiler.cmake
│   │   │   ├── CMakeDetermineCompilerABI_C.bin
│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin
│   │   │   ├── CMakeRCCompiler.cmake
│   │   │   ├── CMakeSystem.cmake
│   │   │   ├── CompilerIdC
│   │   │   │   ├── CMakeCCompilerId.c
│   │   │   │   ├── a.exe
│   │   │   │   └── tmp
│   │   │   └── CompilerIdCXX
│   │   │       ├── CMakeCXXCompilerId.cpp
│   │   │       ├── a.exe
│   │   │       └── tmp
│   │   ├── CMakeConfigureLog.yaml
│   │   ├── CarmenSandiego.dir
│   │   │   ├── Multimedia
│   │   │   │   └── MultimediaHandler.cpp.obj
│   │   │   ├── core
│   │   │   │   ├── PistaDAO.cpp.obj
│   │   │   │   └── SecuazDAO.cpp.obj
│   │   │   └── src
│   │   │       ├── CarmenSandiegoApp.cpp.obj
│   │   │       ├── DatabaseHandler.cpp.obj
│   │   │       └── game_logic.cpp.obj
│   │   ├── TargetDirectories.txt
│   │   ├── clion-MAKER-log.txt
│   │   ├── clion-environment.txt
│   │   ├── cmake.check_cache
│   │   ├── pkgRedirects
│   │   └── rules.ninja
│   ├── CPackConfig.cmake
│   ├── CPackSourceConfig.cmake
│   ├── Testing
│   │   └── Temporary
│   │       └── LastTest.log
│   ├── build.ninja
│   └── cmake_install.cmake
├── cmake_install.cmake
├── cmake_install.cmake.tmpd122a
├── config
│   └── app_config.hpp
├── contenido_proyecto.txt
├── core
│   ├── LocalidadDAO.hpp
│   ├── MultimediaHandler.hpp
│   ├── PistaDAO.cpp
│   ├── PistaDAO.hpp
│   ├── SecuazDAO.cpp
│   ├── SecuazDAO.hpp
│   ├── database.hpp
│   ├── game_controller.cpp
│   ├── game_controller.hpp
│   ├── game_service.cpp
│   └── game_service.hpp
├── dao
│   ├── BaseDAO.hpp
│   ├── BaseDao.cpp
│   ├── LocalidadDAO.cpp
│   ├── LocalidadDAO.hpp
│   ├── MisionDAO.cpp
│   ├── MisionDAO.hpp
│   ├── PartidaDAO.cpp
│   ├── PartidaDAO.hpp
│   ├── PistaDAO.cpp
│   ├── PistaDAO.hpp
│   ├── SecuazDAO.cpp
│   ├── SecuazDAO.hpp
│   ├── UsuarioDAO.cpp
│   ├── UsuarioDAO.hpp
│   ├── database_initialization.cpp
│   └── database_initialization.hpp
├── estructura.txt
├── fixer.py
├── include
│   ├── CarmenSandiegoApp.hpp
│   ├── DatabaseHandler.hpp
│   ├── game_logic.hpp
│   ├── ui.cpp
│   └── ui.h
├── lector.py
├── misc
│   └── CMakeCXXCompilerId.cpp
├── models
│   ├── Localidad.cpp
│   ├── Localidad.hpp
│   ├── Mision.cpp
│   ├── Mision.hpp
│   ├── Partida.cpp
│   ├── Partida.hpp
│   ├── Pista.cpp
│   ├── Pista.hpp
│   ├── Secuaz.cpp
│   ├── Secuaz.hpp
│   ├── Usuario.cpp
│   └── Usuario.hpp
├── print_directory_tree.py
├── root
│   └── .idea
│       ├── .gitignore
│       ├── editor.xml
│       ├── modules.xml
│       ├── root.iml
│       └── workspace.xml
├── src
│   ├── .idea
│   │   ├── editor.xml
│   │   ├── modules.xml
│   │   ├── src.iml
│   │   └── workspace.xml
│   ├── CarmenSandiegoApp.cpp
│   ├── DatabaseHandler.cpp
│   ├── Usuario.cpp
│   ├── Usuario.hpp
│   ├── app
│   │   ├── WelcomeWindow.cpp
│   │   ├── WelcomeWindow.hpp
│   │   └── main.cpp
│   ├── assets
│   │   └── audio
│   │       └── CSD.mp3
│   ├── core
│   │   ├── game_controller.cpp
│   │   ├── game_controller.hpp
│   │   ├── game_logic.cpp
│   │   └── game_logic.hpp
│   ├── database.cpp
│   ├── database.hpp
│   ├── game_logic.cpp
│   ├── main.cpp
│   ├── main_presentacion.ppc
│   ├── multimedia.cpp
│   ├── multimedia.hpp
│   ├── ui.cpp
│   └── ui.hpp
├── torquemada.py
├── tts
│   ├── TTSConfig.cpp
│   ├── TTSConfig.hpp
│   ├── TTSManager.cpp
│   └── TTSManager.hpp
└── ui
    ├── game_window.cpp
    ├── game_window.hpp
    ├── main_window.cpp
    ├── main_window.hpp
    ├── presentation_window.cpp
    ├── presentation_window.hpp
    ├── registration_window.cpp
    ├── registration_window.hpp
    ├── result_window.cpp
    └── result_window.hpp

################################################################################

Archivo: .\fixer.py (omitido, extensión no relevante)
################################################################################

Archivo: .\lector.py (omitido, extensión no relevante)
################################################################################

Archivo: .\print_directory_tree.py (omitido, extensión no relevante)
################################################################################

Archivo: .\PROYECT.rar (omitido, extensión no relevante)
################################################################################

Archivo: .\README.md
Extensión: .md, Tamaño: 0 bytes, Líneas: 0
Contenido (primeros 100000 caracteres):

################################################################################

Archivo: .\torquemada.py (omitido, extensión no relevante)
################################################################################

Directorio: .\.cmake
================================================================================

Directorio: .\.cmake\api
================================================================================

Directorio: .\.cmake\api\v1
================================================================================

Directorio: .\.cmake\api\v1\query
================================================================================

Archivo: .\.cmake\api\v1\query\cache-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\query\cmakeFiles-v1 (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\query\codemodel-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\query\toolchains-v1 (omitido, extensión no relevante)
################################################################################

Directorio: .\.cmake\api\v1\reply
================================================================================

Archivo: .\.cmake\api\v1\reply\cache-v2-6ade88afea3dac0a5b60.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\cmakeFiles-v1-5960018119144a825fce.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\codemodel-v2-84e93c0c6f49cfa52fe8.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\directory-.-Debug-d0094a50bb2071803777.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\index-2024-10-17T18-11-50-0765.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\target-CarmenSandiego-Debug-0902410e724609e95410.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\target-new_target-Debug-23bfc7cded900e7ca501.json (omitido, extensión no relevante)
################################################################################

Archivo: .\.cmake\api\v1\reply\toolchains-v1-0fe24d3b27174199f74f.json (omitido, extensión no relevante)
################################################################################

Directorio: .\.idea
================================================================================

Archivo: .\.idea\.name (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\editor.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\misc.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\modules.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\proyecto_alpha.iml (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\vcs.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\.idea\workspace.xml (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug
================================================================================

Archivo: .\cmake-build-debug\CMakeCache.txt
Extensión: .txt, Tamaño: 33938 bytes, Líneas: 629
Contenido (primeros 100000 caracteres):
# This is the CMakeCache file.
# For build in directory: h:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug
# It was generated by CMake: D:/Clion/bin/cmake/win/x64/bin/cmake.exe
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//Path to a program.
CMAKE_ADDR2LINE:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/addr2line.exe

//Path to a program.
CMAKE_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ar.exe

//Choose the type of build, options are: None Debug Release RelWithDebInfo
// MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Debug

//Enable colored diagnostics throughout.
CMAKE_COLOR_DIAGNOSTICS:BOOL=ON

//Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

//No help, variable specified on the command line.
CMAKE_CXX_COMPILER:UNINITIALIZED=H:/TALLER UNO I/T1/mingw64/bin/g++.exe

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ar.exe

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ranlib.exe

//Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=

//Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

//Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

//Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32

//No help, variable specified on the command line.
CMAKE_C_COMPILER:UNINITIALIZED=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ar.exe

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ranlib.exe

//Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

//Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

//Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

//Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32

//Path to a program.
CMAKE_DLLTOOL:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/dlltool.exe

//Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

//Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Value Computed by CMake.
CMAKE_FIND_PACKAGE_REDIRECTS_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/pkgRedirects

//Convert GNU import libraries to MS format (requires Visual Studio)
CMAKE_GNUtoMS:BOOL=OFF

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files (x86)/CarmenSandiego

//Path to a program.
CMAKE_LINKER:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ld.exe

//make program
CMAKE_MAKE_PROGRAM:FILEPATH=H:/TALLER~1/T1/mingw64/bin/mingw32-make.exe

//Flags used by the linker during the creation of modules during
// all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of modules during
// DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of modules during
// MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of modules during
// RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of modules during
// RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_NM:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/nm.exe

//Path to a program.
CMAKE_OBJCOPY:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/objcopy.exe

//Path to a program.
CMAKE_OBJDUMP:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/objdump.exe

//Value Computed by CMake
CMAKE_PROJECT_DESCRIPTION:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_HOMEPAGE_URL:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=CarmenSandiego

//Value Computed by CMake
CMAKE_PROJECT_VERSION:STATIC=1.0.0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MAJOR:STATIC=1

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MINOR:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_PATCH:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_TWEAK:STATIC=

//Path to a program.
CMAKE_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ranlib.exe

//RC compiler
CMAKE_RC_COMPILER:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/windres.exe

//Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=

//Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=

//Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

//Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

//Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_READELF:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/readelf.exe

//Flags used by the linker during the creation of shared libraries
// during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of shared libraries
// during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of shared libraries
// during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries
// during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of static libraries
// during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of static libraries
// during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of static libraries
// during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of static libraries
// during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_STRIP:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/strip.exe

//Path to a program.
CMAKE_TAPI:FILEPATH=CMAKE_TAPI-NOTFOUND

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Enable to build 7-Zip source packages
CPACK_SOURCE_7Z:BOOL=ON

//Enable to build ZIP source packages
CPACK_SOURCE_ZIP:BOOL=ON

//Value Computed by CMake
CarmenSandiego_BINARY_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug

//Value Computed by CMake
CarmenSandiego_IS_TOP_LEVEL:STATIC=ON

//Value Computed by CMake
CarmenSandiego_SOURCE_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT

//Arguments to supply to pkg-config
PKG_CONFIG_ARGN:STRING=

//pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/pkg-config.exe

//Path to a library.
pkgcfg_lib_GTKMM_cairo:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairo.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_cairo-gobject:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairo-gobject.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_cairomm-1.16:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairomm-1.16.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gdk_pixbuf-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgdk_pixbuf-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gio-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgio-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_giomm-2.68:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgiomm-2.68.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_glib-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libglib-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_glibmm-2.68:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libglibmm-2.68.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gobject-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgobject-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_graphene-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgraphene-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gtk-4:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgtk-4.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gtkmm-4.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgtkmm-4.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_harfbuzz:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libharfbuzz.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_intl:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libintl.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pango-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpango-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangocairo-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangocairo-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangomm-2.48:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangomm-2.48.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangowin32-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangowin32-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_sigc-3.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libsigc-3.0.dll.a

//Path to a library.
pkgcfg_lib_SQLITE3_sqlite3:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libsqlite3.dll.a


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_ADDR2LINE
CMAKE_ADDR2LINE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=h:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=29
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=6
//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE
CMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=D:/Clion/bin/cmake/win/x64/bin/cmake.exe
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=D:/Clion/bin/cmake/win/x64/bin/cpack.exe
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=D:/Clion/bin/cmake/win/x64/bin/ctest.exe
//ADVANCED property for variable: CMAKE_CXX_COMPILER
CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_AR
CMAKE_CXX_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_RANLIB
CMAKE_CXX_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_STANDARD_LIBRARIES
CMAKE_CXX_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER
CMAKE_C_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_AR
CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_DLLTOOL
CMAKE_DLLTOOL-ADVANCED:INTERNAL=1
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=MinGW Makefiles
//Generator instance identifier.
CMAKE_GENERATOR_INSTANCE:INTERNAL=
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=H:/TALLER UNO I/1a_PROYECT/PROYECT
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_NM
CMAKE_NM-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJCOPY
CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJDUMP
CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RANLIB
CMAKE_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_COMPILER
CMAKE_RC_COMPILER-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_DEBUG
CMAKE_RC_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_MINSIZEREL
CMAKE_RC_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELEASE
CMAKE_RC_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELWITHDEBINFO
CMAKE_RC_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_READELF
CMAKE_READELF-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=D:/Clion/bin/cmake/win/x64/share/cmake-3.29
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STRIP
CMAKE_STRIP-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_TAPI
CMAKE_TAPI-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CPACK_SOURCE_7Z
CPACK_SOURCE_7Z-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CPACK_SOURCE_ZIP
CPACK_SOURCE_ZIP-ADVANCED:INTERNAL=1
//Details about finding PkgConfig
FIND_PACKAGE_MESSAGE_DETAILS_PkgConfig:INTERNAL=[H:/TALLER UNO I/T1/mingw64/bin/pkg-config.exe][v2.3.0()]
GTKMM_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairo;-IH:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;-mfpmath=sse;-msse;-msse2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;-IH:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;-IH:/TALLER UNO I/T1/mingw64/bin/../include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;-IH:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;-IH:/TALLER UNO I/T1/mingw64/bin/../include/webp;-DLIBDEFLATE_DLL;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_CFLAGS_I:INTERNAL=
GTKMM_CFLAGS_OTHER:INTERNAL=-mfpmath=sse;-msse;-msse2;-DLIBDEFLATE_DLL
GTKMM_FOUND:INTERNAL=1
GTKMM_INCLUDEDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
GTKMM_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;H:/TALLER UNO I/T1/mingw64/bin/../include/cairo;H:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;H:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;H:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;H:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;H:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;H:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;H:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;H:/TALLER UNO I/T1/mingw64/bin/../include;H:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;H:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;H:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;H:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;H:/TALLER UNO I/T1/mingw64/bin/../include/webp;H:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lgtkmm-4.0;-lgtk-4;-lpangowin32-1.0;-lcairo-gobject;-lgraphene-1.0;-lpangomm-2.48;-lgiomm-2.68;-lgio-2.0;-lglibmm-2.68;-lcairomm-1.16;-lsigc-3.0;-lpangocairo-1.0;-lpango-1.0;-lharfbuzz;-lcairo;-lgdk_pixbuf-2.0;-lgobject-2.0;-lglib-2.0;-lintl
GTKMM_LDFLAGS_OTHER:INTERNAL=
GTKMM_LIBDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
GTKMM_LIBRARIES:INTERNAL=gtkmm-4.0;gtk-4;pangowin32-1.0;cairo-gobject;graphene-1.0;pangomm-2.48;giomm-2.68;gio-2.0;glibmm-2.68;cairomm-1.16;sigc-3.0;pangocairo-1.0;pango-1.0;harfbuzz;cairo;gdk_pixbuf-2.0;gobject-2.0;glib-2.0;intl
GTKMM_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
GTKMM_LIBS:INTERNAL=
GTKMM_LIBS_L:INTERNAL=
GTKMM_LIBS_OTHER:INTERNAL=
GTKMM_LIBS_PATHS:INTERNAL=
GTKMM_MODULE_NAME:INTERNAL=gtkmm-4.0
GTKMM_PREFIX:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/..
GTKMM_STATIC_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairo;-IH:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;-mfpmath=sse;-msse;-msse2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;-IH:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;-IH:/TALLER UNO I/T1/mingw64/bin/../include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;-IH:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;-IH:/TALLER UNO I/T1/mingw64/bin/../include/webp;-DLIBDEFLATE_DLL;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include;-DXML_STATIC;-DLZMA_API_STATIC;-ULIBDEFLATE_DLL
GTKMM_STATIC_CFLAGS_I:INTERNAL=
GTKMM_STATIC_CFLAGS_OTHER:INTERNAL=-mfpmath=sse;-msse;-msse2;-DLIBDEFLATE_DLL;-DXML_STATIC;-DLZMA_API_STATIC;-ULIBDEFLATE_DLL
GTKMM_STATIC_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;H:/TALLER UNO I/T1/mingw64/bin/../include/cairo;H:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;H:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;H:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;H:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;H:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;H:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;H:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;H:/TALLER UNO I/T1/mingw64/bin/../include;H:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;H:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;H:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;H:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;H:/TALLER UNO I/T1/mingw64/bin/../include/webp;H:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_STATIC_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lgtkmm-4.0;-lgtk-4;-lcairo-gobject;-lm;-lgdi32;-lmsimg32;-ldwrite;-ld2d1;-lwindowscodecs;-lgraphene-1.0;-lm;-pthread;-lpangomm-2.48;-lgiomm-2.68;-lglibmm-2.68;-lcairomm-1.16;-lsigc-3.0;-lpangocairo-1.0;-lm;-lgdi32;-lpangoft2-1.0;-lm;-lpangowin32-1.0;-lm;-lgdi32;-ldwrite;-lpango-1.0;-lm;-lcairo;-lm;-lgdi32;-lmsimg32;-ldwrite;-ld2d1;-lwindowscodecs;-lpixman-1;-lm;-pthread;-lfribidi;-lthai;-ldatrie;-lfontconfig;-lexpat;-lm;-lharfbuzz-gobject;-lharfbuzz;-lm;-lusp10;-lgdi32;-lrpcrt4;-lfreetype;-lbz2;-lbrotlidec;-lbrotlicommon;-lgraphite2;-lgdk_pixbuf-2.0;-lm;-lintl;-lgdiplus;-lole32;-lpng16;-lz;-ltiff;-lLerc;-ljbig;-lwebp;-lsharpyuv;-lzstd;-llzma;-ljpeg;-ldeflate;-lgio-2.0;-lintl;-lshlwapi;-ldnsapi;-liphlpapi;-lws2_32;-lgobject-2.0;-lintl;-LH:/TALLER UNO I/T1/mingw64/bin/../lib/../lib;-lffi;-lgmodule-2.0;-lglib-2.0;-lintl;-lws2_32;-lole32;-lwinmm;-lshlwapi;-luuid;-latomic;-lm;-lpcre2-8;-lz
GTKMM_STATIC_LDFLAGS_OTHER:INTERNAL=-pthread;-pthread
GTKMM_STATIC_LIBDIR:INTERNAL=
GTKMM_STATIC_LIBRARIES:INTERNAL=gtkmm-4.0;gtk-4;cairo-gobject;m;gdi32;msimg32;dwrite;d2d1;windowscodecs;graphene-1.0;m;pangomm-2.48;giomm-2.68;glibmm-2.68;cairomm-1.16;sigc-3.0;pangocairo-1.0;m;gdi32;pangoft2-1.0;m;pangowin32-1.0;m;gdi32;dwrite;pango-1.0;m;cairo;m;gdi32;msimg32;dwrite;d2d1;windowscodecs;pixman-1;m;fribidi;thai;datrie;fontconfig;expat;m;harfbuzz-gobject;harfbuzz;m;usp10;gdi32;rpcrt4;freetype;bz2;brotlidec;brotlicommon;graphite2;gdk_pixbuf-2.0;m;intl;gdiplus;ole32;png16;z;tiff;Lerc;jbig;webp;sharpyuv;zstd;lzma;jpeg;deflate;gio-2.0;intl;shlwapi;dnsapi;iphlpapi;ws2_32;gobject-2.0;intl;ffi;gmodule-2.0;glib-2.0;intl;ws2_32;ole32;winmm;shlwapi;uuid;atomic;m;pcre2-8;z
GTKMM_STATIC_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib;H:/TALLER UNO I/T1/mingw64/bin/../lib/../lib
GTKMM_STATIC_LIBS:INTERNAL=
GTKMM_STATIC_LIBS_L:INTERNAL=
GTKMM_STATIC_LIBS_OTHER:INTERNAL=
GTKMM_STATIC_LIBS_PATHS:INTERNAL=
GTKMM_VERSION:INTERNAL=4.16.0
GTKMM_gtkmm-4.0_INCLUDEDIR:INTERNAL=
GTKMM_gtkmm-4.0_LIBDIR:INTERNAL=
GTKMM_gtkmm-4.0_PREFIX:INTERNAL=
GTKMM_gtkmm-4.0_VERSION:INTERNAL=
//ADVANCED property for variable: PKG_CONFIG_ARGN
PKG_CONFIG_ARGN-ADVANCED:INTERNAL=1
//ADVANCED property for variable: PKG_CONFIG_EXECUTABLE
PKG_CONFIG_EXECUTABLE-ADVANCED:INTERNAL=1
SQLITE3_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_CFLAGS_I:INTERNAL=
SQLITE3_CFLAGS_OTHER:INTERNAL=
SQLITE3_FOUND:INTERNAL=1
SQLITE3_INCLUDEDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lsqlite3
SQLITE3_LDFLAGS_OTHER:INTERNAL=
SQLITE3_LIBDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_LIBRARIES:INTERNAL=sqlite3
SQLITE3_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_LIBS:INTERNAL=
SQLITE3_LIBS_L:INTERNAL=
SQLITE3_LIBS_OTHER:INTERNAL=
SQLITE3_LIBS_PATHS:INTERNAL=
SQLITE3_MODULE_NAME:INTERNAL=sqlite3
SQLITE3_PREFIX:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/..
SQLITE3_STATIC_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_STATIC_CFLAGS_I:INTERNAL=
SQLITE3_STATIC_CFLAGS_OTHER:INTERNAL=
SQLITE3_STATIC_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_STATIC_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lsqlite3;-lz
SQLITE3_STATIC_LDFLAGS_OTHER:INTERNAL=
SQLITE3_STATIC_LIBDIR:INTERNAL=
SQLITE3_STATIC_LIBRARIES:INTERNAL=sqlite3;z
SQLITE3_STATIC_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_STATIC_LIBS:INTERNAL=
SQLITE3_STATIC_LIBS_L:INTERNAL=
SQLITE3_STATIC_LIBS_OTHER:INTERNAL=
SQLITE3_STATIC_LIBS_PATHS:INTERNAL=
SQLITE3_VERSION:INTERNAL=3.46.1
SQLITE3_sqlite3_INCLUDEDIR:INTERNAL=
SQLITE3_sqlite3_LIBDIR:INTERNAL=
SQLITE3_sqlite3_PREFIX:INTERNAL=
SQLITE3_sqlite3_VERSION:INTERNAL=
//linker supports push/pop state
_CMAKE_LINKER_PUSHPOP_STATE_SUPPORTED:INTERNAL=TRUE
__pkg_config_arguments_GTKMM:INTERNAL=REQUIRED;gtkmm-4.0
__pkg_config_arguments_SQLITE3:INTERNAL=REQUIRED;sqlite3
__pkg_config_checked_GTKMM:INTERNAL=1
__pkg_config_checked_SQLITE3:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairo
pkgcfg_lib_GTKMM_cairo-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairo-gobject
pkgcfg_lib_GTKMM_cairo-gobject-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairomm-1.16
pkgcfg_lib_GTKMM_cairomm-1.16-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gdk_pixbuf-2.0
pkgcfg_lib_GTKMM_gdk_pixbuf-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gio-2.0
pkgcfg_lib_GTKMM_gio-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_giomm-2.68
pkgcfg_lib_GTKMM_giomm-2.68-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_glib-2.0
pkgcfg_lib_GTKMM_glib-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_glibmm-2.68
pkgcfg_lib_GTKMM_glibmm-2.68-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gobject-2.0
pkgcfg_lib_GTKMM_gobject-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_graphene-1.0
pkgcfg_lib_GTKMM_graphene-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gtk-4
pkgcfg_lib_GTKMM_gtk-4-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gtkmm-4.0
pkgcfg_lib_GTKMM_gtkmm-4.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_harfbuzz
pkgcfg_lib_GTKMM_harfbuzz-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_intl
pkgcfg_lib_GTKMM_intl-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pango-1.0
pkgcfg_lib_GTKMM_pango-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangocairo-1.0
pkgcfg_lib_GTKMM_pangocairo-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangomm-2.48
pkgcfg_lib_GTKMM_pangomm-2.48-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangowin32-1.0
pkgcfg_lib_GTKMM_pangowin32-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_sigc-3.0
pkgcfg_lib_GTKMM_sigc-3.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_SQLITE3_sqlite3
pkgcfg_lib_SQLITE3_sqlite3-ADVANCED:INTERNAL=1
prefix_result:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib


################################################################################

Archivo: .\cmake-build-debug\CMakeCache.txt.tmp88c38 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\cmake_install.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CPackConfig.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CPackSourceConfig.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\Makefile (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\.cmake
================================================================================

Directorio: .\cmake-build-debug\.cmake\api
================================================================================

Directorio: .\cmake-build-debug\.cmake\api\v1
================================================================================

Directorio: .\cmake-build-debug\.cmake\api\v1\query
================================================================================

Archivo: .\cmake-build-debug\.cmake\api\v1\query\cache-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\query\cmakeFiles-v1 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\query\codemodel-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\query\toolchains-v1 (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\.cmake\api\v1\reply
================================================================================

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\cache-v2-ab4cab653ea5dec4289a.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\cmakeFiles-v1-6f8153f958c4d0903b60.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\codemodel-v2-3e6f31acc87ca370f85a.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\directory-.-Debug-d0094a50bb2071803777.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\index-2024-10-17T14-12-51-0232.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\target-CarmenSandiego-Debug-bc673506eca6ac057bbd.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\.cmake\api\v1\reply\toolchains-v1-2880cbcb8de12442f708.json (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\CMakeFiles
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\clion-Debug-log.txt
Extensión: .txt, Tamaño: 451 bytes, Líneas: 4
Contenido (primeros 100000 caracteres):
D:\Clion\bin\cmake\win\x64\bin\cmake.exe -DCMAKE_BUILD_TYPE=Debug "-DCMAKE_C_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe" "-DCMAKE_CXX_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/g++.exe" -G "MinGW Makefiles" -S "H:\TALLER UNO I\1a_PROYECT\PROYECT" -B "H:\TALLER UNO I\1a_PROYECT\PROYECT\cmake-build-debug"
-- Configuring done (3.3s)
-- Generating done (70.4s)
-- Build files have been written to: H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug

################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\clion-environment.txt
Extensión: .txt, Tamaño: 189 bytes, Líneas: 4
Contenido (primeros 100000 caracteres):
ToolSet: 13.0 w64 (local)@H:\TALLER UNO I\T1\mingw64
Options: 

Options:-DCMAKE_C_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/g++.exe
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\cmake.check_cache (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CMakeConfigureLog.yaml (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CMakeDirectoryInformation.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\Makefile.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\Makefile2 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\progress.marks (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\TargetDirectories.txt
Extensión: .txt, Tamaño: 408 bytes, Líneas: 5
Contenido (primeros 100000 caracteres):
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/CarmenSandiego.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/package.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/package_source.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/edit_cache.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-debug/CMakeFiles/rebuild_cache.dir

################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\3.29.6
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeDetermineCompilerABI_C.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeDetermineCompilerABI_CXX.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeRCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CMakeSystem.cmake (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdC
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdC\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdC\CMakeCCompilerId.c (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdC\tmp
================================================================================

Directorio: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdCXX
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdCXX\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdCXX\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 27942 bytes, Líneas: 878
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  if defined(__INTEL_CXX11_MODE__)
#    if defined(__cpp_aggregate_nsdmi)
#      define CXX_STD 201402L
#    else
#      define CXX_STD 201103L
#    endif
#  else
#    define CXX_STD 199711L
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  define CXX_STD _MSVC_LANG
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > 202002L
  "23"
#elif CXX_STD > 201703L
  "20"
#elif CXX_STD >= 201703L
  "17"
#elif CXX_STD >= 201402L
  "14"
#elif CXX_STD >= 201103L
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}

################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\3.29.6\CompilerIdCXX\tmp
================================================================================

Directorio: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\build.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\build.make.tmp6d211 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\cmake_clean.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\compiler_depend.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\compiler_depend.ts (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\depend.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\DependInfo.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\DependInfo.cmake.tmp176fb (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\flags.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\flags.make.tmpe2d55 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\includes_CXX.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\link.txt
Extensión: .txt, Tamaño: 496 bytes, Líneas: 3
Contenido (primeros 100000 caracteres):
D:\Clion\bin\cmake\win\x64\bin\cmake.exe -E rm -f CMakeFiles\CarmenSandiego.dir/objects.a
H:\TALLER~1\T1\mingw64\bin\ar.exe qc CMakeFiles\CarmenSandiego.dir/objects.a @CMakeFiles\CarmenSandiego.dir\objects1.rsp
H:\TALLER~1\T1\mingw64\bin\G__~1.EXE -g -Wl,--whole-archive CMakeFiles\CarmenSandiego.dir/objects.a -Wl,--no-whole-archive -o CarmenSandiego.exe -Wl,--out-implib,libCarmenSandiego.dll.a -Wl,--major-image-version,0,--minor-image-version,0 @CMakeFiles\CarmenSandiego.dir\linkLibs.rsp

################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\linkLibs.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\objects1.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\progress.make (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\CarmenSandiego.dir\src
================================================================================

Directorio: .\cmake-build-debug\CMakeFiles\new_target.dir
================================================================================

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\build.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\cmake_clean.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\compiler_depend.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\compiler_depend.ts (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\depend.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\DependInfo.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\flags.make (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\includes_CXX.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\link.txt
Extensión: .txt, Tamaño: 468 bytes, Líneas: 3
Contenido (primeros 100000 caracteres):
D:\Clion\bin\cmake\win\x64\bin\cmake.exe -E rm -f CMakeFiles\new_target.dir/objects.a
H:\TALLER~1\T1\mingw64\bin\ar.exe qc CMakeFiles\new_target.dir/objects.a @CMakeFiles\new_target.dir\objects1.rsp
H:\TALLER~1\T1\mingw64\bin\G__~1.EXE -g -Wl,--whole-archive CMakeFiles\new_target.dir/objects.a -Wl,--no-whole-archive -o new_target.exe -Wl,--out-implib,libnew_target.dll.a -Wl,--major-image-version,0,--minor-image-version,0 @CMakeFiles\new_target.dir\linkLibs.rsp

################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\linkLibs.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\objects1.rsp (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-debug\CMakeFiles\new_target.dir\progress.make (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-debug\CMakeFiles\new_target.dir\src
================================================================================

Directorio: .\cmake-build-debug\CMakeFiles\pkgRedirects
================================================================================

Directorio: .\cmake-build-maker
================================================================================

Archivo: .\cmake-build-maker\.ninja_deps (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.ninja_log (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\build.ninja (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeCache.txt
Extensión: .txt, Tamaño: 34277 bytes, Líneas: 634
Contenido (primeros 100000 caracteres):
# This is the CMakeCache file.
# For build in directory: h:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker
# It was generated by CMake: H:/TALLER UNO I/T1/mingw64/bin/cmake.exe
# You can edit this file to change values found and used by cmake.
# If you do not want to change any of the values, simply exit the editor.
# If you do want to change a value, simply edit, save, and exit the editor.
# The syntax for the file is as follows:
# KEY:TYPE=VALUE
# KEY is the name of a variable in the cache.
# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
# VALUE is the current value for the KEY.

########################
# EXTERNAL cache entries
########################

//Path to a program.
CMAKE_ADDR2LINE:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/addr2line.exe

//Path to a program.
CMAKE_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ar.exe

//Choose the type of build, options are: None Debug Release RelWithDebInfo
// MinSizeRel ...
CMAKE_BUILD_TYPE:STRING=Debug

//Enable colored diagnostics throughout.
CMAKE_COLOR_DIAGNOSTICS:BOOL=ON

//No help, variable specified on the command line.
CMAKE_CXX_COMPILER:UNINITIALIZED=H:/TALLER UNO I/T1/mingw64/bin/g++.exe

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ar.exe

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ranlib.exe

//Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=

//Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

//Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

//Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32

//No help, variable specified on the command line.
CMAKE_C_COMPILER:UNINITIALIZED=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ar.exe

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/gcc-ranlib.exe

//Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=

//Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

//Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

//Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32

//Path to a program.
CMAKE_DLLTOOL:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/dlltool.exe

//Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=

//Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=

//Value Computed by CMake.
CMAKE_FIND_PACKAGE_REDIRECTS_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/pkgRedirects

//Convert GNU import libraries to MS format (requires Visual Studio)
CMAKE_GNUtoMS:BOOL=OFF

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files (x86)/CarmenSandiego

//Path to a program.
CMAKE_LINKER:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ld.exe

//make program
CMAKE_MAKE_PROGRAM:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ninja.exe

//Flags used by the linker during the creation of modules during
// all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of modules during
// DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of modules during
// MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of modules during
// RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of modules during
// RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_NM:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/nm.exe

//Path to a program.
CMAKE_OBJCOPY:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/objcopy.exe

//Path to a program.
CMAKE_OBJDUMP:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/objdump.exe

//Value Computed by CMake
CMAKE_PROJECT_DESCRIPTION:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_HOMEPAGE_URL:STATIC=

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC=CarmenSandiego

//Value Computed by CMake
CMAKE_PROJECT_VERSION:STATIC=1.0.0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MAJOR:STATIC=1

//Value Computed by CMake
CMAKE_PROJECT_VERSION_MINOR:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_PATCH:STATIC=0

//Value Computed by CMake
CMAKE_PROJECT_VERSION_TWEAK:STATIC=

//Path to a program.
CMAKE_RANLIB:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/ranlib.exe

//RC compiler
CMAKE_RC_COMPILER:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/windres.exe

//Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=

//Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=

//Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

//Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

//Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_READELF:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/readelf.exe

//Flags used by the linker during the creation of shared libraries
// during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of shared libraries
// during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of shared libraries
// during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of shared libraries
// during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries
// during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=

//Flags used by the linker during the creation of static libraries
// during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during the creation of static libraries
// during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during the creation of static libraries
// during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during the creation of static libraries
// during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_STRIP:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/strip.exe

//Path to a program.
CMAKE_TAPI:FILEPATH=CMAKE_TAPI-NOTFOUND

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Enable to build 7-Zip source packages
CPACK_SOURCE_7Z:BOOL=ON

//Enable to build ZIP source packages
CPACK_SOURCE_ZIP:BOOL=ON

//Value Computed by CMake
CarmenSandiego_BINARY_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker

//Value Computed by CMake
CarmenSandiego_IS_TOP_LEVEL:STATIC=ON

//Value Computed by CMake
CarmenSandiego_SOURCE_DIR:STATIC=H:/TALLER UNO I/1a_PROYECT/PROYECT

//Arguments to supply to pkg-config
PKG_CONFIG_ARGN:STRING=

//pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=H:/TALLER UNO I/T1/mingw64/bin/pkg-config.exe

//Path to a library.
pkgcfg_lib_GTKMM_cairo:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairo.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_cairo-gobject:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairo-gobject.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_cairomm-1.16:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libcairomm-1.16.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gdk_pixbuf-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgdk_pixbuf-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gio-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgio-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_giomm-2.68:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgiomm-2.68.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_glib-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libglib-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_glibmm-2.68:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libglibmm-2.68.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gobject-2.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgobject-2.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_graphene-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgraphene-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gtk-4:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgtk-4.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_gtkmm-4.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libgtkmm-4.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_harfbuzz:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libharfbuzz.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_intl:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libintl.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pango-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpango-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangocairo-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangocairo-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangomm-2.48:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangomm-2.48.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_pangowin32-1.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libpangowin32-1.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_sigc-3.0:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libsigc-3.0.dll.a

//Path to a library.
pkgcfg_lib_GTKMM_vulkan-1.dll:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libvulkan-1.dll.a

//Path to a library.
pkgcfg_lib_SQLITE3_sqlite3:FILEPATH=H:/TALLER UNO I/T1/mingw64/lib/libsqlite3.dll.a


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_ADDR2LINE
CMAKE_ADDR2LINE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL=h:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL=30
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL=5
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/cmake.exe
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/cpack.exe
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/ctest.exe
//ADVANCED property for variable: CMAKE_CXX_COMPILER
CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_AR
CMAKE_CXX_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_RANLIB
CMAKE_CXX_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_STANDARD_LIBRARIES
CMAKE_CXX_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER
CMAKE_C_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_AR
CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_STANDARD_LIBRARIES
CMAKE_C_STANDARD_LIBRARIES-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_DLLTOOL
CMAKE_DLLTOOL-ADVANCED:INTERNAL=1
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=Unknown
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS
CMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Ninja
//Generator instance identifier.
CMAKE_GENERATOR_INSTANCE:INTERNAL=
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL=H:/TALLER UNO I/1a_PROYECT/PROYECT
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_NM
CMAKE_NM-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJCOPY
CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJDUMP
CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RANLIB
CMAKE_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_COMPILER
CMAKE_RC_COMPILER-ADVANCED:INTERNAL=1
CMAKE_RC_COMPILER_WORKS:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS
CMAKE_RC_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_DEBUG
CMAKE_RC_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_MINSIZEREL
CMAKE_RC_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELEASE
CMAKE_RC_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RC_FLAGS_RELWITHDEBINFO
CMAKE_RC_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_READELF
CMAKE_READELF-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL=H:/TALLER UNO I/T1/mingw64/share/cmake
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STRIP
CMAKE_STRIP-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_TAPI
CMAKE_TAPI-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CPACK_SOURCE_7Z
CPACK_SOURCE_7Z-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CPACK_SOURCE_ZIP
CPACK_SOURCE_ZIP-ADVANCED:INTERNAL=1
//Details about finding PkgConfig
FIND_PACKAGE_MESSAGE_DETAILS_PkgConfig:INTERNAL=[H:/TALLER UNO I/T1/mingw64/bin/pkg-config.exe][v2.3.0()]
GTKMM_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairo;-IH:/TALLER UNO I/T1/mingw64/bin/../include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;-mfpmath=sse;-msse;-msse2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;-IH:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;-IH:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;-IH:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;-IH:/TALLER UNO I/T1/mingw64/bin/../include/webp;-DLIBDEFLATE_DLL;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_CFLAGS_I:INTERNAL=
GTKMM_CFLAGS_OTHER:INTERNAL=-mfpmath=sse;-msse;-msse2;-DLIBDEFLATE_DLL
GTKMM_FOUND:INTERNAL=1
GTKMM_INCLUDEDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
GTKMM_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;H:/TALLER UNO I/T1/mingw64/bin/../include/cairo;H:/TALLER UNO I/T1/mingw64/bin/../include;H:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;H:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;H:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;H:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;H:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;H:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;H:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;H:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;H:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;H:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;H:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;H:/TALLER UNO I/T1/mingw64/bin/../include/webp;H:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lgtkmm-4.0;-lgtk-4;-lpangowin32-1.0;-lcairo-gobject;-lvulkan-1.dll;-lgraphene-1.0;-lpangomm-2.48;-lgiomm-2.68;-lgio-2.0;-lglibmm-2.68;-lcairomm-1.16;-lsigc-3.0;-lpangocairo-1.0;-lpango-1.0;-lharfbuzz;-lcairo;-lgdk_pixbuf-2.0;-lgobject-2.0;-lglib-2.0;-lintl
GTKMM_LDFLAGS_OTHER:INTERNAL=
GTKMM_LIBDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
GTKMM_LIBRARIES:INTERNAL=gtkmm-4.0;gtk-4;pangowin32-1.0;cairo-gobject;vulkan-1.dll;graphene-1.0;pangomm-2.48;giomm-2.68;gio-2.0;glibmm-2.68;cairomm-1.16;sigc-3.0;pangocairo-1.0;pango-1.0;harfbuzz;cairo;gdk_pixbuf-2.0;gobject-2.0;glib-2.0;intl
GTKMM_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
GTKMM_LIBS:INTERNAL=
GTKMM_LIBS_L:INTERNAL=
GTKMM_LIBS_OTHER:INTERNAL=
GTKMM_LIBS_PATHS:INTERNAL=
GTKMM_MODULE_NAME:INTERNAL=gtkmm-4.0
GTKMM_PREFIX:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/..
GTKMM_STATIC_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairo;-IH:/TALLER UNO I/T1/mingw64/bin/../include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;-mfpmath=sse;-msse;-msse2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;-IH:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;-IH:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;-IH:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;-IH:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;-IH:/TALLER UNO I/T1/mingw64/bin/../include/webp;-DLIBDEFLATE_DLL;-IH:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;-IH:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include;-DXML_STATIC;-DLZMA_API_STATIC;-DLERC_STATIC;-ULIBDEFLATE_DLL
GTKMM_STATIC_CFLAGS_I:INTERNAL=
GTKMM_STATIC_CFLAGS_OTHER:INTERNAL=-mfpmath=sse;-msse;-msse2;-DLIBDEFLATE_DLL;-DXML_STATIC;-DLZMA_API_STATIC;-DLERC_STATIC;-ULIBDEFLATE_DLL
GTKMM_STATIC_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include/gtkmm-4.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/gtkmm-4.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/gtk-4.0;H:/TALLER UNO I/T1/mingw64/bin/../include/cairo;H:/TALLER UNO I/T1/mingw64/bin/../include;H:/TALLER UNO I/T1/mingw64/bin/../include/graphene-1.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/graphene-1.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pangomm-2.48;H:/TALLER UNO I/T1/mingw64/bin/../lib/pangomm-2.48/include;H:/TALLER UNO I/T1/mingw64/bin/../include/giomm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/giomm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/glibmm-2.68;H:/TALLER UNO I/T1/mingw64/bin/../lib/glibmm-2.68/include;H:/TALLER UNO I/T1/mingw64/bin/../include/cairomm-1.16;H:/TALLER UNO I/T1/mingw64/bin/../lib/cairomm-1.16/include;H:/TALLER UNO I/T1/mingw64/bin/../include/sigc++-3.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/sigc++-3.0/include;H:/TALLER UNO I/T1/mingw64/bin/../include/pango-1.0;H:/TALLER UNO I/T1/mingw64/bin/../include/pixman-1;H:/TALLER UNO I/T1/mingw64/bin/../include/fribidi;H:/TALLER UNO I/T1/mingw64/bin/../include/harfbuzz;H:/TALLER UNO I/T1/mingw64/bin/../include/freetype2;H:/TALLER UNO I/T1/mingw64/bin/../include/gdk-pixbuf-2.0;H:/TALLER UNO I/T1/mingw64/bin/../include/libpng16;H:/TALLER UNO I/T1/mingw64/bin/../include/webp;H:/TALLER UNO I/T1/mingw64/bin/../include/glib-2.0;H:/TALLER UNO I/T1/mingw64/bin/../lib/glib-2.0/include
GTKMM_STATIC_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lgtkmm-4.0;-lgtk-4;-lcairo-gobject;-lm;-lgdi32;-lmsimg32;-ldwrite;-ld2d1;-lwindowscodecs;-lvulkan-1.dll;-lgraphene-1.0;-lm;-pthread;-lpangomm-2.48;-lgiomm-2.68;-lglibmm-2.68;-lcairomm-1.16;-lsigc-3.0;-lpangocairo-1.0;-lm;-lgdi32;-lpangoft2-1.0;-lm;-lpangowin32-1.0;-lm;-lgdi32;-ldwrite;-lpango-1.0;-lm;-lcairo;-lm;-lgdi32;-lmsimg32;-ldwrite;-ld2d1;-lwindowscodecs;-lpixman-1;-lm;-pthread;-lfribidi;-lthai;-ldatrie;-lfontconfig;-lexpat;-lm;-lharfbuzz-gobject;-lharfbuzz;-lm;-lusp10;-lgdi32;-lrpcrt4;-lfreetype;-lbz2;-lbrotlidec;-lbrotlicommon;-lgraphite2;-lgdk_pixbuf-2.0;-lm;-lintl;-lgdiplus;-lole32;-lpng16;-lz;-ltiff;-ljbig;-lwebp;-lsharpyuv;-lzstd;-llzma;-lLerc;-ljpeg;-ldeflate;-lgio-2.0;-lintl;-lshlwapi;-ldnsapi;-liphlpapi;-lws2_32;-lgobject-2.0;-lintl;-LH:/TALLER UNO I/T1/mingw64/bin/../lib/../lib;-lffi;-lgmodule-2.0;-lglib-2.0;-lintl;-lws2_32;-lole32;-lwinmm;-lshlwapi;-luuid;-latomic;-lm;-lpcre2-8;-lz
GTKMM_STATIC_LDFLAGS_OTHER:INTERNAL=-pthread;-pthread
GTKMM_STATIC_LIBDIR:INTERNAL=
GTKMM_STATIC_LIBRARIES:INTERNAL=gtkmm-4.0;gtk-4;cairo-gobject;m;gdi32;msimg32;dwrite;d2d1;windowscodecs;vulkan-1.dll;graphene-1.0;m;pangomm-2.48;giomm-2.68;glibmm-2.68;cairomm-1.16;sigc-3.0;pangocairo-1.0;m;gdi32;pangoft2-1.0;m;pangowin32-1.0;m;gdi32;dwrite;pango-1.0;m;cairo;m;gdi32;msimg32;dwrite;d2d1;windowscodecs;pixman-1;m;fribidi;thai;datrie;fontconfig;expat;m;harfbuzz-gobject;harfbuzz;m;usp10;gdi32;rpcrt4;freetype;bz2;brotlidec;brotlicommon;graphite2;gdk_pixbuf-2.0;m;intl;gdiplus;ole32;png16;z;tiff;jbig;webp;sharpyuv;zstd;lzma;Lerc;jpeg;deflate;gio-2.0;intl;shlwapi;dnsapi;iphlpapi;ws2_32;gobject-2.0;intl;ffi;gmodule-2.0;glib-2.0;intl;ws2_32;ole32;winmm;shlwapi;uuid;atomic;m;pcre2-8;z
GTKMM_STATIC_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib;H:/TALLER UNO I/T1/mingw64/bin/../lib/../lib
GTKMM_STATIC_LIBS:INTERNAL=
GTKMM_STATIC_LIBS_L:INTERNAL=
GTKMM_STATIC_LIBS_OTHER:INTERNAL=
GTKMM_STATIC_LIBS_PATHS:INTERNAL=
GTKMM_VERSION:INTERNAL=4.16.0
GTKMM_gtkmm-4.0_INCLUDEDIR:INTERNAL=
GTKMM_gtkmm-4.0_LIBDIR:INTERNAL=
GTKMM_gtkmm-4.0_PREFIX:INTERNAL=
GTKMM_gtkmm-4.0_VERSION:INTERNAL=
//ADVANCED property for variable: PKG_CONFIG_ARGN
PKG_CONFIG_ARGN-ADVANCED:INTERNAL=1
//ADVANCED property for variable: PKG_CONFIG_EXECUTABLE
PKG_CONFIG_EXECUTABLE-ADVANCED:INTERNAL=1
SQLITE3_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_CFLAGS_I:INTERNAL=
SQLITE3_CFLAGS_OTHER:INTERNAL=
SQLITE3_FOUND:INTERNAL=1
SQLITE3_INCLUDEDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lsqlite3
SQLITE3_LDFLAGS_OTHER:INTERNAL=
SQLITE3_LIBDIR:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_LIBRARIES:INTERNAL=sqlite3
SQLITE3_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_LIBS:INTERNAL=
SQLITE3_LIBS_L:INTERNAL=
SQLITE3_LIBS_OTHER:INTERNAL=
SQLITE3_LIBS_PATHS:INTERNAL=
SQLITE3_MODULE_NAME:INTERNAL=sqlite3
SQLITE3_PREFIX:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/..
SQLITE3_STATIC_CFLAGS:INTERNAL=-IH:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_STATIC_CFLAGS_I:INTERNAL=
SQLITE3_STATIC_CFLAGS_OTHER:INTERNAL=
SQLITE3_STATIC_INCLUDE_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../include
SQLITE3_STATIC_LDFLAGS:INTERNAL=-LH:/TALLER UNO I/T1/mingw64/bin/../lib;-lsqlite3;-lz
SQLITE3_STATIC_LDFLAGS_OTHER:INTERNAL=
SQLITE3_STATIC_LIBDIR:INTERNAL=
SQLITE3_STATIC_LIBRARIES:INTERNAL=sqlite3;z
SQLITE3_STATIC_LIBRARY_DIRS:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib
SQLITE3_STATIC_LIBS:INTERNAL=
SQLITE3_STATIC_LIBS_L:INTERNAL=
SQLITE3_STATIC_LIBS_OTHER:INTERNAL=
SQLITE3_STATIC_LIBS_PATHS:INTERNAL=
SQLITE3_VERSION:INTERNAL=3.46.1
SQLITE3_sqlite3_INCLUDEDIR:INTERNAL=
SQLITE3_sqlite3_LIBDIR:INTERNAL=
SQLITE3_sqlite3_PREFIX:INTERNAL=
SQLITE3_sqlite3_VERSION:INTERNAL=
//linker supports push/pop state
_CMAKE_LINKER_PUSHPOP_STATE_SUPPORTED:INTERNAL=TRUE
__pkg_config_arguments_GTKMM:INTERNAL=REQUIRED;gtkmm-4.0
__pkg_config_arguments_SQLITE3:INTERNAL=REQUIRED;sqlite3
__pkg_config_checked_GTKMM:INTERNAL=1
__pkg_config_checked_SQLITE3:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairo
pkgcfg_lib_GTKMM_cairo-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairo-gobject
pkgcfg_lib_GTKMM_cairo-gobject-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_cairomm-1.16
pkgcfg_lib_GTKMM_cairomm-1.16-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gdk_pixbuf-2.0
pkgcfg_lib_GTKMM_gdk_pixbuf-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gio-2.0
pkgcfg_lib_GTKMM_gio-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_giomm-2.68
pkgcfg_lib_GTKMM_giomm-2.68-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_glib-2.0
pkgcfg_lib_GTKMM_glib-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_glibmm-2.68
pkgcfg_lib_GTKMM_glibmm-2.68-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gobject-2.0
pkgcfg_lib_GTKMM_gobject-2.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_graphene-1.0
pkgcfg_lib_GTKMM_graphene-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gtk-4
pkgcfg_lib_GTKMM_gtk-4-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_gtkmm-4.0
pkgcfg_lib_GTKMM_gtkmm-4.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_harfbuzz
pkgcfg_lib_GTKMM_harfbuzz-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_intl
pkgcfg_lib_GTKMM_intl-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pango-1.0
pkgcfg_lib_GTKMM_pango-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangocairo-1.0
pkgcfg_lib_GTKMM_pangocairo-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangomm-2.48
pkgcfg_lib_GTKMM_pangomm-2.48-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_pangowin32-1.0
pkgcfg_lib_GTKMM_pangowin32-1.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_sigc-3.0
pkgcfg_lib_GTKMM_sigc-3.0-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_GTKMM_vulkan-1.dll
pkgcfg_lib_GTKMM_vulkan-1.dll-ADVANCED:INTERNAL=1
//ADVANCED property for variable: pkgcfg_lib_SQLITE3_sqlite3
pkgcfg_lib_SQLITE3_sqlite3-ADVANCED:INTERNAL=1
prefix_result:INTERNAL=H:/TALLER UNO I/T1/mingw64/bin/../lib


################################################################################

Archivo: .\cmake-build-maker\cmake_install.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CPackConfig.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CPackSourceConfig.cmake (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\.cmake
================================================================================

Directorio: .\cmake-build-maker\.cmake\api
================================================================================

Directorio: .\cmake-build-maker\.cmake\api\v1
================================================================================

Directorio: .\cmake-build-maker\.cmake\api\v1\query
================================================================================

Archivo: .\cmake-build-maker\.cmake\api\v1\query\cache-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\query\cmakeFiles-v1 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\query\codemodel-v2 (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\query\toolchains-v1 (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\.cmake\api\v1\reply
================================================================================

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\cache-v2-6734288d51683422012f.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\cmakeFiles-v1-f7c27fb66474498097bb.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\codemodel-v2-e1161075f8149fcb2d11.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\directory-.-Debug-d0094a50bb2071803777.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\index-2024-10-18T22-34-07-0378.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\target-CarmenSandiego-Debug-81ea5f7b70b7ce26560f.json (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\.cmake\api\v1\reply\toolchains-v1-2880cbcb8de12442f708.json (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\clion-environment.txt
Extensión: .txt, Tamaño: 260 bytes, Líneas: 4
Contenido (primeros 100000 caracteres):
ToolSet: 13.0 w64 (local)@H:\TALLER UNO I\T1\mingw64
Options: 

Options:-DCMAKE_MAKE_PROGRAM=H:/TALLER UNO I/T1/mingw64/bin/ninja.exe -DCMAKE_C_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/g++.exe -G Ninja
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\clion-MAKER-log.txt
Extensión: .txt, Tamaño: 504 bytes, Líneas: 4
Contenido (primeros 100000 caracteres):
"H:\TALLER UNO I\T1\mingw64\bin\cmake.exe" -DCMAKE_BUILD_TYPE=Debug "-DCMAKE_MAKE_PROGRAM=H:/TALLER UNO I/T1/mingw64/bin/ninja.exe" "-DCMAKE_C_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe" "-DCMAKE_CXX_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/g++.exe" -G Ninja -S "H:\TALLER UNO I\1a_PROYECT\PROYECT" -B "H:\TALLER UNO I\1a_PROYECT\PROYECT\cmake-build-maker"
-- Configuring done (0.1s)
-- Generating done (0.1s)
-- Build files have been written to: H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker

################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\cmake.check_cache (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\CMakeConfigureLog.yaml (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\rules.ninja (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\TargetDirectories.txt
Extensión: .txt, Tamaño: 408 bytes, Líneas: 5
Contenido (primeros 100000 caracteres):
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/CarmenSandiego.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/package.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/package_source.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/edit_cache.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/cmake-build-maker/CMakeFiles/rebuild_cache.dir

################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\3.30.5
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeCXXCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeDetermineCompilerABI_C.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeDetermineCompilerABI_CXX.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeRCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CMakeSystem.cmake (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdC
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdC\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdC\CMakeCCompilerId.c (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdC\tmp
================================================================================

Directorio: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdCXX
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdCXX\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdCXX\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 29376 bytes, Líneas: 919
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}

################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\3.30.5\CompilerIdCXX\tmp
================================================================================

Directorio: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir
================================================================================

Directorio: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\core
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\core\PistaDAO.cpp.obj (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\core\SecuazDAO.cpp.obj (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\Multimedia
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\Multimedia\MultimediaHandler.cpp.obj (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\src
================================================================================

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\src\CarmenSandiegoApp.cpp.obj (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\src\DatabaseHandler.cpp.obj (omitido, extensión no relevante)
################################################################################

Archivo: .\cmake-build-maker\CMakeFiles\CarmenSandiego.dir\src\game_logic.cpp.obj (omitido, extensión no relevante)
################################################################################

Directorio: .\cmake-build-maker\CMakeFiles\pkgRedirects
================================================================================

Directorio: .\cmake-build-maker\Testing
================================================================================

Directorio: .\cmake-build-maker\Testing\Temporary
================================================================================

Archivo: .\cmake-build-maker\Testing\Temporary\LastTest.log (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles
================================================================================

Archivo: .\CMakeFiles\clion-environment.txt
Extensión: .txt, Tamaño: 260 bytes, Líneas: 4
Contenido (primeros 100000 caracteres):
ToolSet: 13.0 w64 (local)@H:\TALLER UNO I\T1\mingw64
Options: 

Options:-DCMAKE_MAKE_PROGRAM=H:/TALLER UNO I/T1/mingw64/bin/ninja.exe -DCMAKE_C_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=H:/TALLER UNO I/T1/mingw64/bin/g++.exe -G Ninja
################################################################################

Archivo: .\CMakeFiles\cmake.check_cache (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\CMakeConfigureLog.yaml (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\rules.ninja (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\rules.ninja.tmp76ec7 (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\TargetDirectories.txt
Extensión: .txt, Tamaño: 380 bytes, Líneas: 6
Contenido (primeros 100000 caracteres):
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/CarmenSandiego.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/new_target.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/package.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/package_source.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/edit_cache.dir
H:/TALLER UNO I/1a_PROYECT/PROYECT/CMakeFiles/rebuild_cache.dir

################################################################################

Directorio: .\CMakeFiles\3.29.6
================================================================================

Archivo: .\CMakeFiles\3.29.6\CMakeCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CMakeCCompiler.cmake.tmp (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CMakeDetermineCompilerABI_C.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CMakeRCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CMakeSystem.cmake (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles\3.29.6\CompilerIdC
================================================================================

Archivo: .\CMakeFiles\3.29.6\CompilerIdC\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CompilerIdC\CMakeCCompilerId.c (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles\3.29.6\CompilerIdC\tmp
================================================================================

Directorio: .\CMakeFiles\3.29.6\CompilerIdCXX
================================================================================

Archivo: .\CMakeFiles\3.29.6\CompilerIdCXX\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.29.6\CompilerIdCXX\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 27942 bytes, Líneas: 878
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L
#  if defined(__INTEL_CXX11_MODE__)
#    if defined(__cpp_aggregate_nsdmi)
#      define CXX_STD 201402L
#    else
#      define CXX_STD 201103L
#    endif
#  else
#    define CXX_STD 199711L
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  define CXX_STD _MSVC_LANG
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > 202002L
  "23"
#elif CXX_STD > 201703L
  "20"
#elif CXX_STD >= 201703L
  "17"
#elif CXX_STD >= 201402L
  "14"
#elif CXX_STD >= 201103L
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}

################################################################################

Directorio: .\CMakeFiles\3.29.6\CompilerIdCXX\tmp
================================================================================

Directorio: .\CMakeFiles\3.30.3
================================================================================

Archivo: .\CMakeFiles\3.30.3\CMakeCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CMakeCXXCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CMakeDetermineCompilerABI_C.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CMakeDetermineCompilerABI_CXX.bin (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CMakeRCCompiler.cmake (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CMakeSystem.cmake (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles\3.30.3\CompilerIdC
================================================================================

Archivo: .\CMakeFiles\3.30.3\CompilerIdC\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CompilerIdC\CMakeCCompilerId.c (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles\3.30.3\CompilerIdC\tmp
================================================================================

Directorio: .\CMakeFiles\3.30.3\CompilerIdCXX
================================================================================

Archivo: .\CMakeFiles\3.30.3\CompilerIdCXX\a.exe (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\3.30.3\CompilerIdCXX\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 29376 bytes, Líneas: 919
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}

################################################################################

Directorio: .\CMakeFiles\3.30.3\CompilerIdCXX\tmp
================================================================================

Directorio: .\CMakeFiles\CarmenSandiego.dir
================================================================================

Directorio: .\CMakeFiles\CarmenSandiego.dir\core
================================================================================

Directorio: .\CMakeFiles\CarmenSandiego.dir\src
================================================================================

Archivo: .\CMakeFiles\CarmenSandiego.dir\src\database.cpp.obj (omitido, extensión no relevante)
################################################################################

Archivo: .\CMakeFiles\CarmenSandiego.dir\src\multimedia.cpp.obj (omitido, extensión no relevante)
################################################################################

Directorio: .\CMakeFiles\new_target.dir
================================================================================

Directorio: .\CMakeFiles\new_target.dir\core
================================================================================

Directorio: .\CMakeFiles\pkgRedirects
================================================================================

Directorio: .\config
================================================================================

Archivo: .\config\app_config.hpp
Extensión: .hpp, Tamaño: 283 bytes, Líneas: 15
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef APP_CONFIG_HPP
#define APP_CONFIG_HPP

class app_config {
public:
    app_config();
    ~app_config();
};

#endif // APP_CONFIG_HPP


################################################################################

Directorio: .\core
================================================================================

Archivo: .\core\database.hpp
Extensión: .hpp, Tamaño: 440 bytes, Líneas: 17
Contenido (primeros 100000 caracteres):

#ifndef DATABASEHANDLER_HPP
#define DATABASEHANDLER_HPP

#include "DatabaseHandler.hpp"
#include "DatabaseHandler.hpp"
#include "DatabaseHandler.hpp"
class DatabaseHandler {
public:
#include "DatabaseHandler.hpp"
#include "DatabaseHandler.hpp"
#include "DatabaseHandler.hpp"
    DatabaseHandler(const std::string& db_path);
    bool autenticar_usuario(const std::string& username, const std::string& password);
};

#endif

################################################################################

Archivo: .\core\game_controller.cpp
Extensión: .cpp, Tamaño: 3349 bytes, Líneas: 100
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include "PistaDAO.hpp"
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "game_controller.hpp"
#include "game_window.hpp"
#include <iostream>
#include <vector>

// Create a TTSConfig and pass it to TTSManager
TTSConfig config("es", 100, 50);  // Configuration with language, speed, and volume

// Constructor of GameController, initializes gameService, ttsManager, and GameWindow
GameController::GameController(std::shared_ptr<GameService> gameService, std::shared_ptr<TTSManager> ttsManager)
    : gameService(gameService), ttsManager(ttsManager) {
    // Pass the ttsManager to the GameWindow constructor
    gameWindow = std::make_shared<GameWindow>(ttsManager);
}

// Starts a new game and updates the interface
void GameController::iniciarJuego() {
    ttsManager->speak("Bienvenido a: ¿Pero dónde, en Colonia, está Carmen Sandiego?");
    gameService->iniciarNuevaPartida();
    actualizarInterfaz();
}

// Método para convertir Pista a std::string
std::string pistaToString(const Pista& pista) {
    return pista.getDescripcion();
}

// Handles the player's clue selection
void GameController::manejarSeleccionPista(int indicePista) {
    auto pistas = gameService->obtenerPistasActuales();
    if (indicePista < 0 || indicePista >= pistas.size()) {
        mostrarMensaje("Selección no válida.");
        return;
    }

    if (gameService->manejarSeleccionPista(pistas[indicePista])) {
        manejarPistaCorrecta();
    } else {
        manejarPistaIncorrecta();
    }
}

// Handles correct clue logic
void GameController::manejarPistaCorrecta() {
    mostrarMensaje("¡Correcto! Te estás acercando al secuaz.");
    if (gameService->esCapturaExitosa()) {
        capturarSecuaz();
    } else {
        moverSecuazANuevaLocalidad();
    }
}

// Handles incorrect clue logic
void GameController::manejarPistaIncorrecta() {
    mostrarMensaje("Pista incorrecta. El secuaz se está escapando.");
    if (gameService->haPerdidoJuego()) {
        mostrarMensaje("Has perdido. Intenta nuevamente.");
        // Logic to restart the game can be added here
    } else {
        moverSecuazANuevaLocalidad();
    }
}

// Captures the current henchman
void GameController::capturarSecuaz() {
    mostrarMensaje("¡Has capturado al secuaz!");
    gameService->capturarSecuazActual();
    actualizarInterfaz();
}

// Moves the henchman to a new location
void GameController::moverSecuazANuevaLocalidad() {
    gameService->moverSecuazANuevaLocalidad();
    actualizarInterfaz();
}

// Updates the interface with new clues and game status
void GameController::actualizarInterfaz() {
    auto pistas = gameService->obtenerPistasActuales();
    std::vector<std::string> pistasStr;
    for (const auto& pista : pistas) {
        pistasStr.push_back(pistaToString(pista));
    }

    gameWindow->mostrarPistas(pistasStr);
    gameWindow->actualizarEstado(gameService->obtenerEstadoJuego());
}

// Displays a message on both the console and the GameWindow, and speaks it using TTS
void GameController::mostrarMensaje(const std::string& mensaje) {
    ttsManager->speak(mensaje);
    std::cout << mensaje << std::endl;
    gameWindow->mostrarMensaje(mensaje);
}


################################################################################

Archivo: .\core\game_controller.hpp
Extensión: .hpp, Tamaño: 1023 bytes, Líneas: 38
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef GAME_CONTROLLER_HPP
#define GAME_CONTROLLER_HPP

#include <memory>
#include <vector>
#include <string>
#include "game_service.hpp"
#include "TTSManager.hpp"

// Declaración hacia adelante para evitar dependencias circulares
class GameWindow;

class GameController {
public:
    GameController(std::shared_ptr<GameService> gameService, std::shared_ptr<TTSManager> ttsManager);

    void iniciarJuego();
    void manejarSeleccionPista(int indicePista);
    void capturarSecuaz();
    void moverSecuazANuevaLocalidad();

private:
    std::shared_ptr<GameService> gameService;
    std::shared_ptr<TTSManager> ttsManager;
    std::shared_ptr<GameWindow> gameWindow;

    void actualizarInterfaz();
    void manejarPistaCorrecta();
    void manejarPistaIncorrecta();
    void mostrarMensaje(const std::string& mensaje);
};

#endif // GAME_CONTROLLER_HPP


################################################################################

Archivo: .\core\game_service.cpp
Extensión: .cpp, Tamaño: 3579 bytes, Líneas: 97
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include "PistaDAO.hpp"
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "game_service.hpp"
#include <iostream>
#include <algorithm>
#include <random>
#include "LocalidadDAO.hpp"

// Constructor
GameService::GameService(std::shared_ptr<PistaDAO> pistaDAO, std::shared_ptr<LocalidadDAO> localidadDAO, std::shared_ptr<SecuazDAO> secuazDAO)
    : pistaDAO(pistaDAO), localidadDAO(localidadDAO), secuazDAO(secuazDAO), erroresConsecutivos(0) {
    iniciarNuevaPartida();
}

// Inicia una nueva partida seleccionando un nuevo secuaz
void GameService::iniciarNuevaPartida() {
    seleccionarNuevoSecuaz();
}

// Obtener pistas para la localidad actual
std::vector<Pista> GameService::obtenerPistasActuales() {
    return pistaDAO->obtenerPistasPorLocalidad(localidadActual.getId());
}

// Maneja la selección de una pista, verificando si es correcta y actualizando el estado del juego
bool GameService::manejarSeleccionPista(const Pista& pista) {
    if (pista.esCorrecta()) {
        if (esCapturaExitosa()) {
            return true; // Captura exitosa
        }
        moverSecuazANuevaLocalidad();
        return false; // Pista correcta pero no captura
    } else {
        erroresConsecutivos++;
        return false; // Pista incorrecta
    }
}

// Capturar al secuaz actual, marcándolo como capturado y seleccionando uno nuevo
void GameService::capturarSecuazActual() {
    secuazActual.setCapturado(true);
    secuazDAO->actualizarSecuaz(secuazActual);
    seleccionarNuevoSecuaz();
}

// Mueve al secuaz actual a una nueva localidad aleatoria
void GameService::moverSecuazANuevaLocalidad() {
    auto localidades = localidadDAO->obtenerTodasLasLocalidades();
    localidades.erase(std::remove(localidades.begin(), localidades.end(), localidadActual), localidades.end());

    if (!localidades.empty()) {
        std::random_device rd;
        std::mt19937 g(rd());
        std::shuffle(localidades.begin(), localidades.end(), g);

        auto nuevaLocalidad = std::make_shared<Localidad>(localidades.front());
        secuazActual.setLocalidad(nuevaLocalidad);
        secuazDAO->actualizarSecuaz(secuazActual);
        localidadActual = *nuevaLocalidad;
    } else {
        std::cerr << "No hay localidades disponibles para mover al secuaz." << std::endl;
    }
}

// Verifica si el jugador ha perdido (tres errores consecutivos)
bool GameService::haPerdidoJuego() const {
    return erroresConsecutivos >= 3;
}

// Verifica si la captura del secuaz ha sido exitosa
bool GameService::esCapturaExitosa() const {
    return localidadActual.getId() == secuazActual.getLocalidad()->getId();
}

// Devuelve el estado actual del juego como una cadena
std::string GameService::obtenerEstadoJuego() const {
    return "Secuaz: " + secuazActual.getNombre() + ", Localidad: " + localidadActual.getNombre();
}

// Selecciona un nuevo secuaz de entre los que no han sido capturados
void GameService::seleccionarNuevoSecuaz() {
    auto secuacesDisponibles = secuazDAO->obtenerSecuacesNoCapturados();
    if (!secuacesDisponibles.empty()) {
        std::random_device rd;
        std::mt19937 g(rd());
        std::shuffle(secuacesDisponibles.begin(), secuacesDisponibles.end(), g);

        secuazActual = secuacesDisponibles.front();
        localidadActual = *(secuazActual.getLocalidad());
    } else {
        std::cerr << "No hay secuaces disponibles para seleccionar." << std::endl;
    }
}


################################################################################

Archivo: .\core\game_service.hpp
Extensión: .hpp, Tamaño: 1177 bytes, Líneas: 43
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef GAME_SERVICE_HPP
#define GAME_SERVICE_HPP

#include <vector>
#include <memory>
#include "LocalidadDAO.hpp"
#include "PistaDAO.hpp"
#include "SecuazDAO.hpp"
#include "Pista.hpp"
#include "Localidad.hpp"
#include "Secuaz.hpp"

class GameService {
public:
    GameService(std::shared_ptr<PistaDAO> pistaDAO, std::shared_ptr<LocalidadDAO> localidadDAO, std::shared_ptr<SecuazDAO> secuazDAO);

    void iniciarNuevaPartida();
    std::vector<Pista> obtenerPistasActuales();
    bool manejarSeleccionPista(const Pista& pista);
    void capturarSecuazActual();
    void moverSecuazANuevaLocalidad();
    bool haPerdidoJuego() const;
    bool esCapturaExitosa() const;
    std::string obtenerEstadoJuego() const;

private:
    std::shared_ptr<PistaDAO> pistaDAO;
    std::shared_ptr<LocalidadDAO> localidadDAO;
    std::shared_ptr<SecuazDAO> secuazDAO;

    Localidad localidadActual;
    Secuaz secuazActual;
    int erroresConsecutivos;

    void seleccionarNuevoSecuaz();
};

#endif // GAME_SERVICE_HPP


################################################################################

Archivo: .\core\LocalidadDAO.hpp
Extensión: .hpp, Tamaño: 122 bytes, Líneas: 10
Contenido (primeros 100000 caracteres):

#ifndef LOCALIDADDAO_HPP
#define LOCALIDADDAO_HPP

class LocalidadDAO {
public:
    LocalidadDAO();
};

#endif

################################################################################

Archivo: .\core\MultimediaHandler.hpp
Extensión: .hpp, Tamaño: 385 bytes, Líneas: 16
Contenido (primeros 100000 caracteres):
#ifndef MULTIMEDIA_HANDLER_HPP
#define MULTIMEDIA_HANDLER_HPP

#include <string>

class MultimediaHandler {
public:
    MultimediaHandler();
    void cargar_imagen(const std::string& ruta_imagen);
    void reproducir_sonido(const std::string& ruta_sonido);
    void detener_sonido();

    // Otros métodos para manejar multimedia
};

#endif  // MULTIMEDIA_HANDLER_HPP

################################################################################

Archivo: .\core\PistaDAO.cpp
Extensión: .cpp, Tamaño: 3934 bytes, Líneas: 125
Contenido (primeros 100000 caracteres):
#include "PistaDAO.hpp"
#include <random>
#include <memory>
#include "Pista.hpp"

PistaDAO::PistaDAO(sqlite3* db) : BaseDAO(db) {}

bool PistaDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Pista (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            localidad_id INTEGER NOT NULL,
            numero INTEGER NOT NULL,
            descripcion TEXT NOT NULL,
            correcta BOOLEAN NOT NULL,
            FOREIGN KEY(localidad_id) REFERENCES Localidad(id)
        );
    )";
    return ejecutarSQL(sql);
}

bool PistaDAO::insertarPista(const Pista& pista) {
    std::string sql = "INSERT INTO Pista (localidad_id, numero, descripcion, correcta) VALUES (?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, pista.getLocalidadId());
    sqlite3_bind_int(stmt, 2, pista.getNumero());
    sqlite3_bind_text(stmt, 3, pista.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, pista.esCorrecta() ? 1 : 0);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PistaDAO::actualizarPista(const Pista& pista) {
    std::string sql = "UPDATE Pista SET localidad_id = ?, numero = ?, descripcion = ?, correcta = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, pista.getLocalidadId());
    sqlite3_bind_int(stmt, 2, pista.getNumero());
    sqlite3_bind_text(stmt, 3, pista.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, pista.esCorrecta() ? 1 : 0);
    sqlite3_bind_int(stmt, 5, pista.getId());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PistaDAO::eliminarPista(int id) {
    std::string sql = "DELETE FROM Pista WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

std::shared_ptr<Pista> PistaDAO::obtenerPistaPorId(int id) {
    std::string sql = "SELECT * FROM Pista WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Pista> pista = nullptr;

    if (!prepararStatement(sql, &stmt)) return pista;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        pista = std::make_shared<Pista>(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
    }

    cerrarStatement(stmt);
    return pista;
}

std::vector<Pista> PistaDAO::obtenerPistasPorLocalidad(int localidadId) {
    std::string sql = "SELECT * FROM Pista WHERE localidad_id = ?";
    sqlite3_stmt* stmt;
    std::vector<Pista> pistas;

    if (!prepararStatement(sql, &stmt)) return pistas;

    sqlite3_bind_int(stmt, 1, localidadId);

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Pista pista(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
        pistas.push_back(pista);
    }

    cerrarStatement(stmt);
    return pistas;
}

std::vector<Pista> PistaDAO::obtenerPistasAleatoriasPorLocalidad(int localidadId, int cantidad) {
    auto pistas = obtenerPistasPorLocalidad(localidadId);
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(pistas.begin(), pistas.end(), g);

    if (pistas.size() > cantidad) {
        pistas.resize(cantidad);
    }
    return pistas;
}

################################################################################

Archivo: .\core\PistaDAO.hpp
Extensión: .hpp, Tamaño: 628 bytes, Líneas: 22
Contenido (primeros 100000 caracteres):
#ifndef PISTADAO_HPP
#define PISTADAO_HPP

#include <sqlite3.h>
#include <memory>
#include <vector>
#include "models/Pista.hpp" 
#include "BaseDAO.hpp"

class PistaDAO : public BaseDAO {
public:
    PistaDAO(sqlite3* db);
    bool crearTabla();
    bool insertarPista(const Pista& pista);
    bool actualizarPista(const Pista& pista);
    bool eliminarPista(int id);
    std::shared_ptr<Pista> obtenerPistaPorId(int id);
    std::vector<Pista> obtenerPistasPorLocalidad(int localidadId);
    std::vector<Pista> obtenerPistasAleatoriasPorLocalidad(int localidadId, int cantidad);
};

#endif // PISTADAO_HPP

################################################################################

Archivo: .\core\SecuazDAO.cpp
Extensión: .cpp, Tamaño: 110 bytes, Líneas: 5
Contenido (primeros 100000 caracteres):
#include "SecuazDAO.hpp"

SecuazDAO::SecuazDAO() {
    // Implementación del constructor de SecuazDAO
}

################################################################################

Archivo: .\core\SecuazDAO.hpp
Extensión: .hpp, Tamaño: 166 bytes, Líneas: 10
Contenido (primeros 100000 caracteres):
#ifndef SECUAZ_DAO_HPP
#define SECUAZ_DAO_HPP

class SecuazDAO {
public:
    SecuazDAO();
    // Métodos necesarios para gestionar los secuaces
};

#endif

################################################################################

Directorio: .\dao
================================================================================

Archivo: .\dao\BaseDao.cpp
Extensión: .cpp, Tamaño: 2480 bytes, Líneas: 67
Contenido (primeros 100000 caracteres):
#include "BaseDAO.hpp"
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "database_initialization.hpp"
#include <sqlite3.h>
#include "UsuarioDAO.hpp"
#include "LocalidadDAO.hpp"
#include "PistaDAO.hpp"
#include "SecuazDAO.hpp"
#include <iostream>
#include <memory>

bool DatabaseInitialization::insertarDatosIniciales(sqlite3* db) {

    UsuarioDAO usuarioDAO(db);
    LocalidadDAO localidadDAO(db);
    PistaDAO pistaDAO(db);
    SecuazDAO secuazDAO(db, std::make_shared<LocalidadDAO>(db));


    // Insertar usuarios iniciales
    // Verifica si ya existe un usuario con el nombre "Carmen" para evitar duplicados
    if (!usuarioDAO.obtenerUsuarioPorNombre("Carmen")) {
        usuarioDAO.insertarUsuario(Usuario(0, "Carmen", "Sandiego", "password", "Mastermind", 0, ""));
    } else {
        std::cout << "Usuario 'Carmen Sandiego' ya existe, se omite la inserción." << std::endl;
    }

    // Insertar localidades iniciales
    auto colonia = std::make_shared<Localidad>(Localidad(0, "Colonia", "Descripción de Colonia", -34.471, -57.844));
    if (!localidadDAO.obtenerLocalidadPorId(0)) {
        localidadDAO.insertarLocalidad(*colonia);
    } else {
        std::cout << "Localidad 'Colonia' ya existe, se omite la inserción." << std::endl;
    }

    if (!localidadDAO.obtenerLocalidadPorId(1)) {
        localidadDAO.insertarLocalidad(Localidad(1, "Montevideo", "Descripción de Montevideo", -34.9011, -56.1645));
    } else {
        std::cout << "Localidad 'Montevideo' ya existe, se omite la inserción." << std::endl;
    }

    // Insertar pistas iniciales
    if (!pistaDAO.obtenerPistaPorId(0)) {
        pistaDAO.insertarPista(Pista(0, 0, 1, "Una pista importante.", true));
    } else {
        std::cout << "Pista con ID 0 ya existe, se omite la inserción." << std::endl;
    }

    if (!pistaDAO.obtenerPistaPorId(1)) {
        pistaDAO.insertarPista(Pista(1, 1, 2, "Otra pista relevante.", false));
    } else {
        std::cout << "Pista con ID 1 ya existe, se omite la inserción." << std::endl;
    }

    // Insertar secuaces iniciales
    if (!secuazDAO.obtenerSecuazPorId(0)) {
        secuazDAO.insertarSecuaz(Secuaz(0, "Villano", "Hacker", 10, colonia, false));
    } else {
        std::cout << "Secuaz con ID 0 ya existe, se omite la inserción." << std::endl;
    }

    return true;
}


################################################################################

Archivo: .\dao\BaseDAO.hpp
Extensión: .hpp, Tamaño: 572 bytes, Líneas: 28
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef BASE_DAO_HPP
#define BASE_DAO_HPP

#include <sqlite3.h>
#include <string>
#include <vector>
#include <memory>

class BaseDAO {
public:
    BaseDAO(sqlite3* db);
    virtual ~BaseDAO();

protected:
    sqlite3* db;

    bool ejecutarSQL(const std::string& sql);
    bool prepararStatement(const std::string& sql, sqlite3_stmt** stmt);
    void cerrarStatement(sqlite3_stmt* stmt);
};

#endif // BASE_DAO_HPP



################################################################################

Archivo: .\dao\database_initialization.cpp
Extensión: .cpp, Tamaño: 5654 bytes, Líneas: 159
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "database_initialization.hpp"
#include "UsuarioDAO.hpp"
#include "LocalidadDAO.hpp"
#include "PistaDAO.hpp"
#include "SecuazDAO.hpp"
#include <iostream>
#include <sqlite3.h>

// Función para leer secuaces desde la base de datos
void leerSecuaces(sqlite3* db) {
    const char* sql = "SELECT id, nombre, habilidad, peligrosidad, localidad_id, capturado FROM Secuaz";

    sqlite3_stmt* stmt;
    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) == SQLITE_OK) {
        std::cout << "ID | Nombre | Habilidad | Peligrosidad | Localidad ID | Capturado\n";
        std::cout << "---------------------------------------------------------------\n";
        while (sqlite3_step(stmt) == SQLITE_ROW) {
            int id = sqlite3_column_int(stmt, 0);
            const unsigned char* nombre = sqlite3_column_text(stmt, 1);
            const unsigned char* habilidad = sqlite3_column_text(stmt, 2);
            int peligrosidad = sqlite3_column_int(stmt, 3);
            int localidad_id = sqlite3_column_int(stmt, 4);
            int capturado = sqlite3_column_int(stmt, 5);

            std::cout << id << " | " << nombre << " | " << habilidad << " | " << peligrosidad << " | " << localidad_id << " | " << (capturado ? "Sí" : "No") << std::endl;
        }
        sqlite3_finalize(stmt);
    } else {
        std::cerr << "Error al preparar la consulta: " << sqlite3_errmsg(db) << std::endl;
    }
}

bool DatabaseInitialization::insertarDatosIniciales(sqlite3* db) {
    UsuarioDAO usuarioDAO(db);
    LocalidadDAO localidadDAO(db);
    PistaDAO pistaDAO(db);
    SecuazDAO secuazDAO(db, std::make_shared<LocalidadDAO>(db));

    // Insertar usuarios iniciales
    usuarioDAO.insertarUsuario(Usuario(0, "Carmen", "Sandiego", "password", "Mastermind", 0, ""));

    // Insertar localidades iniciales
    auto colonia = std::make_shared<Localidad>(Localidad(0, "Colonia", "Descripción de Colonia", -34.471, -57.844));
    localidadDAO.insertarLocalidad(*colonia);
    localidadDAO.insertarLocalidad(Localidad(1, "Montevideo", "Descripción de Montevideo", -34.9011, -56.1645));

    // Insertar pistas iniciales
    pistaDAO.insertarPista(Pista(0, 0, 1, "Una pista importante.", true));
    pistaDAO.insertarPista(Pista(1, 1, 2, "Otra pista relevante.", false));

    // Leer secuaces de la base de datos y mostrarlos
    leerSecuaces(db);

    return true;
}

bool DatabaseInitialization::crearTablas(sqlite3* db) {
    const char* sqlUsuario = R"(
        CREATE TABLE IF NOT EXISTS Usuario (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            apellido TEXT NOT NULL,
            contrasena TEXT NOT NULL,
            rango TEXT NOT NULL,
            capturas INTEGER DEFAULT 0,
            progreso TEXT
        );
    )";

    const char* sqlLocalidad = R"(
        CREATE TABLE IF NOT EXISTS Localidad (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL UNIQUE,
            descripcion TEXT,
            latitud REAL,
            longitud REAL
        );
    )";

    const char* sqlPista = R"(
        CREATE TABLE IF NOT EXISTS Pista (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            localidad_id INTEGER NOT NULL,
            numero INTEGER NOT NULL,
            descripcion TEXT NOT NULL,
            correcta BOOLEAN NOT NULL,
            FOREIGN KEY(localidad_id) REFERENCES Localidad(id)
        );
    )";

    const char* sqlSecuaz = R"(
        CREATE TABLE IF NOT EXISTS Secuaz (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            habilidad TEXT NOT NULL,
            peligrosidad INTEGER NOT NULL,
            localidad_id INTEGER,
            capturado BOOLEAN DEFAULT FALSE,
            FOREIGN KEY(localidad_id) REFERENCES Localidad(id)
        );
    )";

    char* errMsg = nullptr;
    if (sqlite3_exec(db, sqlUsuario, nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "Error creando tabla Usuario: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }

    if (sqlite3_exec(db, sqlLocalidad, nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "Error creando tabla Localidad: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }

    if (sqlite3_exec(db, sqlPista, nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "Error creando tabla Pista: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }

    if (sqlite3_exec(db, sqlSecuaz, nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "Error creando tabla Secuaz: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }

    return true;
}

bool DatabaseInitialization::inicializarBaseDeDatos(const std::string& rutaDB) {
    sqlite3* db;
    int rc = sqlite3_open(rutaDB.c_str(), &db);

    if (rc) {
        std::cerr << "No se pudo abrir la base de datos: " << sqlite3_errmsg(db) << std::endl;
        return false;
    }

    if (!crearTablas(db)) {
        std::cerr << "Error creando tablas." << std::endl;
        sqlite3_close(db);
        return false;
    }

    if (!insertarDatosIniciales(db)) {
        std::cerr << "Error insertando datos iniciales." << std::endl;
        sqlite3_close(db);
        return false;
    }

    sqlite3_close(db);
    return true;
}


################################################################################

Archivo: .\dao\database_initialization.hpp
Extensión: .hpp, Tamaño: 515 bytes, Líneas: 21
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef DATABASE_INITIALIZATION_HPP
#define DATABASE_INITIALIZATION_HPP

#include <string>
#include <sqlite3.h>

class DatabaseInitialization {
public:
    static bool inicializarBaseDeDatos(const std::string& rutaDB);

private:
    static bool crearTablas(sqlite3* db);
    static bool insertarDatosIniciales(sqlite3* db);
};

#endif // DATABASE_INITIALIZATION_HPP


################################################################################

Archivo: .\dao\LocalidadDAO.cpp
Extensión: .cpp, Tamaño: 3792 bytes, Líneas: 114
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "LocalidadDAO.hpp"
#include <iostream>

LocalidadDAO::LocalidadDAO(sqlite3* db) : BaseDAO(db) {}

bool LocalidadDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Localidad (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL UNIQUE,
            descripcion TEXT,
            latitud REAL,
            longitud REAL
        );
    )";
    return ejecutarSQL(sql);
}

bool LocalidadDAO::insertarLocalidad(const Localidad& localidad) {
    std::string sql = "INSERT INTO Localidad (nombre, descripcion, latitud, longitud) VALUES (?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_text(stmt, 1, localidad.getNombre().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, localidad.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_double(stmt, 3, localidad.getLatitud());
    sqlite3_bind_double(stmt, 4, localidad.getLongitud());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool LocalidadDAO::actualizarLocalidad(const Localidad& localidad) {
    std::string sql = "UPDATE Localidad SET nombre = ?, descripcion = ?, latitud = ?, longitud = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_text(stmt, 1, localidad.getNombre().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, localidad.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_double(stmt, 3, localidad.getLatitud());
    sqlite3_bind_double(stmt, 4, localidad.getLongitud());
    sqlite3_bind_int(stmt, 5, localidad.getId());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool LocalidadDAO::eliminarLocalidad(int id) {
    std::string sql = "DELETE FROM Localidad WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

std::shared_ptr<Localidad> LocalidadDAO::obtenerLocalidadPorId(int id) {
    std::string sql = "SELECT * FROM Localidad WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Localidad> localidad = nullptr;

    if (!prepararStatement(sql, &stmt)) return localidad;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        localidad = std::make_shared<Localidad>(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            sqlite3_column_double(stmt, 3),
            sqlite3_column_double(stmt, 4)
        );
    }

    cerrarStatement(stmt);
    return localidad;
}

std::vector<Localidad> LocalidadDAO::obtenerTodasLasLocalidades() {
    std::string sql = "SELECT * FROM Localidad";
    sqlite3_stmt* stmt;
    std::vector<Localidad> localidades;

    if (!prepararStatement(sql, &stmt)) return localidades;

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Localidad localidad(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            sqlite3_column_double(stmt, 3),
            sqlite3_column_double(stmt, 4)
        );
        localidades.push_back(localidad);
    }

    cerrarStatement(stmt);
    return localidades;
}


################################################################################

Archivo: .\dao\LocalidadDAO.hpp
Extensión: .hpp, Tamaño: 723 bytes, Líneas: 27
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include "LocalidadDAO.hpp"
#include <gtkmm.h>
#ifndef LOCALIDAD_DAO_HPP
#define LOCALIDAD_DAO_HPP

#include <vector>
#include <memory>
#include "BaseDAO.hpp"
#include "Localidad.hpp"

class LocalidadDAO : public BaseDAO {
public:
    LocalidadDAO(sqlite3* db);

    bool crearTabla();
    bool insertarLocalidad(const Localidad& localidad);
    bool actualizarLocalidad(const Localidad& localidad);
    bool eliminarLocalidad(int id);
    std::shared_ptr<Localidad> obtenerLocalidadPorId(int id);
    std::vector<Localidad> obtenerTodasLasLocalidades();
};

#endif // LOCALIDAD_DAO_HPP


################################################################################

Archivo: .\dao\MisionDAO.cpp
Extensión: .cpp, Tamaño: 3815 bytes, Líneas: 114
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "MisionDAO.hpp"
#include <iostream>

MisionDAO::MisionDAO(sqlite3* db) : BaseDAO(db) {}

bool MisionDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Mision (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            titulo TEXT NOT NULL UNIQUE,
            descripcion TEXT,
            objetivo TEXT NOT NULL,
            completada BOOLEAN NOT NULL DEFAULT FALSE
        );
    )";
    return ejecutarSQL(sql);
}

bool MisionDAO::insertarMision(const Mision& mision) {
    std::string sql = "INSERT INTO Mision (titulo, descripcion, objetivo, completada) VALUES (?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_text(stmt, 1, mision.getTitulo().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, mision.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 3, mision.getObjetivo().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, mision.isCompletada() ? 1 : 0);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool MisionDAO::actualizarMision(const Mision& mision) {
    std::string sql = "UPDATE Mision SET titulo = ?, descripcion = ?, objetivo = ?, completada = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_text(stmt, 1, mision.getTitulo().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, mision.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 3, mision.getObjetivo().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, mision.isCompletada() ? 1 : 0);
    sqlite3_bind_int(stmt, 5, mision.getId());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool MisionDAO::eliminarMision(int id) {
    std::string sql = "DELETE FROM Mision WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

std::shared_ptr<Mision> MisionDAO::obtenerMisionPorId(int id) {
    std::string sql = "SELECT * FROM Mision WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Mision> mision = nullptr;

    if (!prepararStatement(sql, &stmt)) return mision;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        mision = std::make_shared<Mision>(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
    }

    cerrarStatement(stmt);
    return mision;
}

std::vector<Mision> MisionDAO::obtenerTodasLasMisiones() {
    std::string sql = "SELECT * FROM Mision";
    sqlite3_stmt* stmt;
    std::vector<Mision> misiones;

    if (!prepararStatement(sql, &stmt)) return misiones;

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Mision mision(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
        misiones.push_back(mision);
    }

    cerrarStatement(stmt);
    return misiones;
}


################################################################################

Archivo: .\dao\MisionDAO.hpp
Extensión: .hpp, Tamaño: 645 bytes, Líneas: 27
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef MISION_DAO_HPP
#define MISION_DAO_HPP

#include <vector>
#include <memory>
#include "BaseDAO.hpp"
#include "Mision.hpp"

class MisionDAO : public BaseDAO {
public:
    MisionDAO(sqlite3* db);

    bool crearTabla();
    bool insertarMision(const Mision& mision);
    bool actualizarMision(const Mision& mision);
    bool eliminarMision(int id);
    std::shared_ptr<Mision> obtenerMisionPorId(int id);
    std::vector<Mision> obtenerTodasLasMisiones();
};

#endif // MISION_DAO_HPP



################################################################################

Archivo: .\dao\PartidaDAO.cpp
Extensión: .cpp, Tamaño: 3544 bytes, Líneas: 113
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "PartidaDAO.hpp"
#include <iostream>

PartidaDAO::PartidaDAO(sqlite3* db) : BaseDAO(db) {}

bool PartidaDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Partida (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            usuario_id INTEGER NOT NULL,
            secuaz_id INTEGER NOT NULL,
            estado TEXT NOT NULL,
            intentos INTEGER NOT NULL DEFAULT 0,
            FOREIGN KEY(usuario_id) REFERENCES Usuario(id),
            FOREIGN KEY(secuaz_id) REFERENCES Secuaz(id)
        );
    )";
    return ejecutarSQL(sql);
}

bool PartidaDAO::insertarPartida(const Partida& partida) {
    std::string sql = "INSERT INTO Partida (usuario_id, secuaz_id, estado, intentos) VALUES (?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, partida.getUsuarioId());
    sqlite3_bind_int(stmt, 2, partida.getSecuazId());
    sqlite3_bind_text(stmt, 3, partida.getEstado().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, partida.getIntentos());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PartidaDAO::actualizarPartida(const Partida& partida) {
    std::string sql = "UPDATE Partida SET estado = ?, intentos = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_text(stmt, 1, partida.getEstado().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 2, partida.getIntentos());
    sqlite3_bind_int(stmt, 3, partida.getId());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PartidaDAO::eliminarPartida(int id) {
    std::string sql = "DELETE FROM Partida WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

std::shared_ptr<Partida> PartidaDAO::obtenerPartidaPorId(int id) {
    std::string sql = "SELECT * FROM Partida WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Partida> partida = nullptr;

    if (!prepararStatement(sql, &stmt)) return partida;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        partida = std::make_shared<Partida>(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4)
        );
    }

    cerrarStatement(stmt);
    return partida;
}

std::vector<Partida> PartidaDAO::obtenerTodasLasPartidas() {
    std::string sql = "SELECT * FROM Partida";
    sqlite3_stmt* stmt;
    std::vector<Partida> partidas;

    if (!prepararStatement(sql, &stmt)) return partidas;

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Partida partida(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4)
        );
        partidas.push_back(partida);
    }

    cerrarStatement(stmt);
    return partidas;
}


################################################################################

Archivo: .\dao\PartidaDAO.hpp
Extensión: .hpp, Tamaño: 659 bytes, Líneas: 26
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef PARTIDA_DAO_HPP
#define PARTIDA_DAO_HPP

#include <vector>
#include <memory>
#include "BaseDAO.hpp"
#include "Partida.hpp"

class PartidaDAO : public BaseDAO {
public:
    PartidaDAO(sqlite3* db);

    bool crearTabla();
    bool insertarPartida(const Partida& partida);
    bool actualizarPartida(const Partida& partida);
    bool eliminarPartida(int id);
    std::shared_ptr<Partida> obtenerPartidaPorId(int id);
    std::vector<Partida> obtenerTodasLasPartidas();
};

#endif // PARTIDA_DAO_HPP


################################################################################

Archivo: .\dao\PistaDAO.cpp
Extensión: .cpp, Tamaño: 3934 bytes, Líneas: 125
Contenido (primeros 100000 caracteres):
#include "PistaDAO.hpp"
#include <random>
#include <memory>
#include "Pista.hpp"

PistaDAO::PistaDAO(sqlite3* db) : BaseDAO(db) {}

bool PistaDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Pista (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            localidad_id INTEGER NOT NULL,
            numero INTEGER NOT NULL,
            descripcion TEXT NOT NULL,
            correcta BOOLEAN NOT NULL,
            FOREIGN KEY(localidad_id) REFERENCES Localidad(id)
        );
    )";
    return ejecutarSQL(sql);
}

bool PistaDAO::insertarPista(const Pista& pista) {
    std::string sql = "INSERT INTO Pista (localidad_id, numero, descripcion, correcta) VALUES (?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, pista.getLocalidadId());
    sqlite3_bind_int(stmt, 2, pista.getNumero());
    sqlite3_bind_text(stmt, 3, pista.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, pista.esCorrecta() ? 1 : 0);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PistaDAO::actualizarPista(const Pista& pista) {
    std::string sql = "UPDATE Pista SET localidad_id = ?, numero = ?, descripcion = ?, correcta = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, pista.getLocalidadId());
    sqlite3_bind_int(stmt, 2, pista.getNumero());
    sqlite3_bind_text(stmt, 3, pista.getDescripcion().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 4, pista.esCorrecta() ? 1 : 0);
    sqlite3_bind_int(stmt, 5, pista.getId());

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

bool PistaDAO::eliminarPista(int id) {
    std::string sql = "DELETE FROM Pista WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);

    int rc = sqlite3_step(stmt);
    cerrarStatement(stmt);
    return rc == SQLITE_DONE;
}

std::shared_ptr<Pista> PistaDAO::obtenerPistaPorId(int id) {
    std::string sql = "SELECT * FROM Pista WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Pista> pista = nullptr;

    if (!prepararStatement(sql, &stmt)) return pista;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        pista = std::make_shared<Pista>(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
    }

    cerrarStatement(stmt);
    return pista;
}

std::vector<Pista> PistaDAO::obtenerPistasPorLocalidad(int localidadId) {
    std::string sql = "SELECT * FROM Pista WHERE localidad_id = ?";
    sqlite3_stmt* stmt;
    std::vector<Pista> pistas;

    if (!prepararStatement(sql, &stmt)) return pistas;

    sqlite3_bind_int(stmt, 1, localidadId);

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Pista pista(
            sqlite3_column_int(stmt, 0),
            sqlite3_column_int(stmt, 1),
            sqlite3_column_int(stmt, 2),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            sqlite3_column_int(stmt, 4) == 1
        );
        pistas.push_back(pista);
    }

    cerrarStatement(stmt);
    return pistas;
}

std::vector<Pista> PistaDAO::obtenerPistasAleatoriasPorLocalidad(int localidadId, int cantidad) {
    auto pistas = obtenerPistasPorLocalidad(localidadId);
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(pistas.begin(), pistas.end(), g);

    if (pistas.size() > cantidad) {
        pistas.resize(cantidad);
    }
    return pistas;
}

################################################################################

Archivo: .\dao\PistaDAO.hpp
Extensión: .hpp, Tamaño: 628 bytes, Líneas: 22
Contenido (primeros 100000 caracteres):
#ifndef PISTADAO_HPP
#define PISTADAO_HPP

#include <sqlite3.h>
#include <memory>
#include <vector>
#include "models/Pista.hpp" 
#include "BaseDAO.hpp"

class PistaDAO : public BaseDAO {
public:
    PistaDAO(sqlite3* db);
    bool crearTabla();
    bool insertarPista(const Pista& pista);
    bool actualizarPista(const Pista& pista);
    bool eliminarPista(int id);
    std::shared_ptr<Pista> obtenerPistaPorId(int id);
    std::vector<Pista> obtenerPistasPorLocalidad(int localidadId);
    std::vector<Pista> obtenerPistasAleatoriasPorLocalidad(int localidadId, int cantidad);
};

#endif // PISTADAO_HPP

################################################################################

Archivo: .\dao\SecuazDAO.cpp
Extensión: .cpp, Tamaño: 5512 bytes, Líneas: 141
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include "LocalidadDAO.hpp"
#include <gtkmm.h>
#include "SecuazDAO.hpp"
#include "Secuaz.hpp"
#include "LocalidadDAO.hpp"
#include <sqlite3.h>
#include <iostream>
#include <functional>

// Constructor de SecuazDAO
SecuazDAO::SecuazDAO(sqlite3* db, std::shared_ptr<LocalidadDAO> localidadDAO)
    : BaseDAO(db), localidadDAO(localidadDAO) {}

// Función auxiliar para ejecutar declaraciones SQL
bool SecuazDAO::ejecutarDeclaracion(const char* sql, std::function<void(sqlite3_stmt*)> bindFn) {
    sqlite3_stmt* stmt;
    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) != SQLITE_OK) {
        std::cerr << "Error preparando la declaración: " << sqlite3_errmsg(db) << std::endl;
        return false;
    }

    if (bindFn) {
        bindFn(stmt);
    }

    if (sqlite3_step(stmt) != SQLITE_DONE) {
        std::cerr << "Error ejecutando la declaración: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_finalize(stmt);
        return false;
    }

    sqlite3_finalize(stmt);
    return true;
}

// Crear tabla Secuaz
bool SecuazDAO::crearTabla() {
    const char* sql = R"(
        CREATE TABLE IF NOT EXISTS Secuaz (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            habilidad TEXT,
            peligrosidad INTEGER,
            localidad_id INTEGER,
            capturado INTEGER DEFAULT 0,
            FOREIGN KEY(localidad_id) REFERENCES Localidad(id)
        );
    )";
    return ejecutarDeclaracion(sql);
}

// Insertar un Secuaz
bool SecuazDAO::insertarSecuaz(const Secuaz& secuaz) {
    const char* sql = "INSERT INTO Secuaz (nombre, habilidad, peligrosidad, localidad_id, capturado) VALUES (?, ?, ?, ?, ?);";
    return ejecutarDeclaracion(sql, [&secuaz](sqlite3_stmt* stmt) {
        sqlite3_bind_text(stmt, 1, secuaz.getNombre().c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 2, secuaz.getHabilidad().c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 3, secuaz.getPeligrosidad());
        sqlite3_bind_int(stmt, 4, secuaz.getLocalidad()->getId());
        sqlite3_bind_int(stmt, 5, secuaz.isCapturado() ? 1 : 0);
    });
}

// Actualizar un Secuaz
bool SecuazDAO::actualizarSecuaz(const Secuaz& secuaz) {
    const char* sql = "UPDATE Secuaz SET nombre = ?, habilidad = ?, peligrosidad = ?, localidad_id = ?, capturado = ? WHERE id = ?;";
    return ejecutarDeclaracion(sql, [&secuaz](sqlite3_stmt* stmt) {
        sqlite3_bind_text(stmt, 1, secuaz.getNombre().c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 2, secuaz.getHabilidad().c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 3, secuaz.getPeligrosidad());
        sqlite3_bind_int(stmt, 4, secuaz.getLocalidad()->getId());
        sqlite3_bind_int(stmt, 5, secuaz.isCapturado() ? 1 : 0);
        sqlite3_bind_int(stmt, 6, secuaz.getId());
    });
}

// Eliminar un Secuaz
bool SecuazDAO::eliminarSecuaz(int id) {
    const char* sql = "DELETE FROM Secuaz WHERE id = ?;";
    return ejecutarDeclaracion(sql, [id](sqlite3_stmt* stmt) {
        sqlite3_bind_int(stmt, 1, id);
    });
}

// Obtener un Secuaz por ID
std::shared_ptr<Secuaz> SecuazDAO::obtenerSecuazPorId(int id) {
    const char* sql = "SELECT id, nombre, habilidad, peligrosidad, localidad_id, capturado FROM Secuaz WHERE id = ?;";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) != SQLITE_OK) {
        std::cerr << "Error preparando la declaración: " << sqlite3_errmsg(db) << std::endl;
        return nullptr;
    }

    sqlite3_bind_int(stmt, 1, id);

    std::shared_ptr<Secuaz> secuaz = nullptr;
    if (sqlite3_step(stmt) == SQLITE_ROW) {
        secuaz = std::make_shared<Secuaz>(
            sqlite3_column_int(stmt, 0),  // ID
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),  // Nombre
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),  // Habilidad
            sqlite3_column_int(stmt, 3),  // Peligrosidad
            localidadDAO->obtenerLocalidadPorId(sqlite3_column_int(stmt, 4)),  // Localidad
            sqlite3_column_int(stmt, 5) != 0  // Capturado (convertir a booleano)
        );
    }

    sqlite3_finalize(stmt);
    return secuaz;
}

// Obtener todos los Secuaces no capturados
std::vector<Secuaz> SecuazDAO::obtenerSecuacesNoCapturados() {
    const char* sql = "SELECT id, nombre, habilidad, peligrosidad, localidad_id, capturado FROM Secuaz WHERE capturado = 0;";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) != SQLITE_OK) {
        std::cerr << "Error preparando la declaración: " << sqlite3_errmsg(db) << std::endl;
        return {};
    }

    std::vector<Secuaz> secuaces;
    while (sqlite3_step(stmt) == SQLITE_ROW) {
        secuaces.emplace_back(
            sqlite3_column_int(stmt, 0),  // ID
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),  // Nombre
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),  // Habilidad
            sqlite3_column_int(stmt, 3),  // Peligrosidad
            localidadDAO->obtenerLocalidadPorId(sqlite3_column_int(stmt, 4)),  // Localidad
            sqlite3_column_int(stmt, 5) != 0  // Capturado (convertir a booleano)
        );
    }

    sqlite3_finalize(stmt);
    return secuaces;
}


################################################################################

Archivo: .\dao\SecuazDAO.hpp
Extensión: .hpp, Tamaño: 1042 bytes, Líneas: 35
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef SECUAZ_DAO_HPP
#define SECUAZ_DAO_HPP

#include <vector>
#include <memory>
#include <functional>
#include "BaseDAO.hpp"
#include "Secuaz.hpp"
#include "LocalidadDAO.hpp"

class SecuazDAO : public BaseDAO {
public:
    SecuazDAO(sqlite3* db, std::shared_ptr<LocalidadDAO> localidadDAO);

    // Métodos principales para manipulación de Secuaz en la base de datos
    bool crearTabla();
    bool insertarSecuaz(const Secuaz& secuaz);
    bool actualizarSecuaz(const Secuaz& secuaz);
    bool eliminarSecuaz(int id);
    std::shared_ptr<Secuaz> obtenerSecuazPorId(int id);
    std::vector<Secuaz> obtenerSecuacesNoCapturados();

private:
    // Método auxiliar para ejecutar declaraciones SQL
    bool ejecutarDeclaracion(const char* sql, std::function<void(sqlite3_stmt*)> bindFn = nullptr);

    std::shared_ptr<LocalidadDAO> localidadDAO;
};

#endif // SECUAZ_DAO_HPP


################################################################################

Archivo: .\dao\UsuarioDAO.cpp
Extensión: .cpp, Tamaño: 6047 bytes, Líneas: 165
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "UsuarioDAO.hpp"
#include <iostream>

// Constructor: hereda de BaseDAO
UsuarioDAO::UsuarioDAO(sqlite3* db) : BaseDAO(db) {}

// Función auxiliar para ejecutar consultas con sqlite3
bool UsuarioDAO::ejecutarConsulta(const std::string& sql, sqlite3_stmt** stmt) {
    if (!prepararStatement(sql, stmt)) return false;
    int rc = sqlite3_step(*stmt);
    cerrarStatement(*stmt);
    return rc == SQLITE_DONE;
}

// Crear tabla de usuarios en la base de datos
bool UsuarioDAO::crearTabla() {
    std::string sql = R"(
        CREATE TABLE IF NOT EXISTS Usuario (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            apellido TEXT NOT NULL,
            contrasena TEXT NOT NULL,
            rango TEXT NOT NULL,
            capturas INTEGER DEFAULT 0,
            progreso TEXT
        );
    )";
    return ejecutarSQL(sql);
}

// Función auxiliar para ligar los valores de un usuario a una sentencia SQL
void UsuarioDAO::ligarValoresUsuario(sqlite3_stmt* stmt, const Usuario& usuario, bool incluirId) {
    sqlite3_bind_text(stmt, 1, usuario.getNombre().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, usuario.getApellido().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 3, usuario.getContrasena().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 4, usuario.getRango().c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_int(stmt, 5, usuario.getCapturas());
    sqlite3_bind_text(stmt, 6, usuario.getProgreso().c_str(), -1, SQLITE_STATIC);

    if (incluirId) {
        sqlite3_bind_int(stmt, 7, usuario.getId());
    }
}

// Insertar un nuevo usuario en la base de datos
bool UsuarioDAO::insertarUsuario(const Usuario& usuario) {
    std::string sql = "INSERT INTO Usuario (nombre, apellido, contrasena, rango, capturas, progreso) VALUES (?, ?, ?, ?, ?, ?)";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    ligarValoresUsuario(stmt, usuario);
    return ejecutarConsulta(sql, &stmt);
}

// Actualizar un usuario existente en la base de datos
bool UsuarioDAO::actualizarUsuario(const Usuario& usuario) {
    std::string sql = "UPDATE Usuario SET nombre = ?, apellido = ?, contrasena = ?, rango = ?, capturas = ?, progreso = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    ligarValoresUsuario(stmt, usuario, true);
    return ejecutarConsulta(sql, &stmt);
}

// Eliminar un usuario de la base de datos por su ID
bool UsuarioDAO::eliminarUsuario(int id) {
    std::string sql = "DELETE FROM Usuario WHERE id = ?";
    sqlite3_stmt* stmt;

    if (!prepararStatement(sql, &stmt)) return false;

    sqlite3_bind_int(stmt, 1, id);
    return ejecutarConsulta(sql, &stmt);
}

// Obtener un usuario por su ID
std::shared_ptr<Usuario> UsuarioDAO::obtenerUsuarioPorId(int id) {
    std::string sql = "SELECT * FROM Usuario WHERE id = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Usuario> usuario = nullptr;

    if (!prepararStatement(sql, &stmt)) return usuario;

    sqlite3_bind_int(stmt, 1, id);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        usuario = std::make_shared<Usuario>(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 4)),
            sqlite3_column_int(stmt, 5),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 6))
        );
    }

    cerrarStatement(stmt);
    return usuario;
}

// Obtener un usuario por su nombre
std::shared_ptr<Usuario> UsuarioDAO::obtenerUsuarioPorNombre(const std::string& nombre) {
    std::string sql = "SELECT * FROM Usuario WHERE nombre = ?";
    sqlite3_stmt* stmt;
    std::shared_ptr<Usuario> usuario = nullptr;

    if (!prepararStatement(sql, &stmt)) return usuario;

    sqlite3_bind_text(stmt, 1, nombre.c_str(), -1, SQLITE_STATIC);

    if (sqlite3_step(stmt) == SQLITE_ROW) {
        usuario = std::make_shared<Usuario>(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 4)),
            sqlite3_column_int(stmt, 5),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 6))
        );
    }

    cerrarStatement(stmt);
    return usuario;
}

// Obtener todos los usuarios de la base de datos
std::vector<Usuario> UsuarioDAO::obtenerTodosLosUsuarios() {
    std::string sql = "SELECT * FROM Usuario";
    sqlite3_stmt* stmt;
    std::vector<Usuario> usuarios;

    if (!prepararStatement(sql, &stmt)) return usuarios;

    while (sqlite3_step(stmt) == SQLITE_ROW) {
        Usuario usuario(
            sqlite3_column_int(stmt, 0),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 3)),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 4)),
            sqlite3_column_int(stmt, 5),
            reinterpret_cast<const char*>(sqlite3_column_text(stmt, 6))
        );
        usuarios.push_back(usuario);
    }

    cerrarStatement(stmt);
    return usuarios;
}

// Insertar usuarios iniciales (opcional)
bool UsuarioDAO::insertarUsuariosIniciales() {
    // Implementa lógica para insertar datos iniciales si es necesario
    return true;
}


################################################################################

Archivo: .\dao\UsuarioDAO.hpp
Extensión: .hpp, Tamaño: 980 bytes, Líneas: 33
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef USUARIODAO_HPP
#define USUARIODAO_HPP

#include "BaseDAO.hpp"
#include "Usuario.hpp"
#include <memory>
#include <vector>

class UsuarioDAO : public BaseDAO {
public:
    UsuarioDAO(sqlite3* db);

    bool crearTabla();
    bool insertarUsuario(const Usuario& usuario);
    bool actualizarUsuario(const Usuario& usuario);
    bool eliminarUsuario(int id);
    std::shared_ptr<Usuario> obtenerUsuarioPorId(int id);
    std::shared_ptr<Usuario> obtenerUsuarioPorNombre(const std::string& nombre);
    std::vector<Usuario> obtenerTodosLosUsuarios();
    bool insertarUsuariosIniciales();

private:
    bool ejecutarConsulta(const std::string& sql, sqlite3_stmt** stmt);
    void ligarValoresUsuario(sqlite3_stmt* stmt, const Usuario& usuario, bool incluirId = false);
};

#endif // USUARIODAO_HPP


################################################################################

Directorio: .\include
================================================================================

Archivo: .\include\CarmenSandiegoApp.hpp
Extensión: .hpp, Tamaño: 607 bytes, Líneas: 29
Contenido (primeros 100000 caracteres):
#ifndef CARMEN_SANDIEGO_APP_HPP
#define CARMEN_SANDIEGO_APP_HPP

#include <gtkmm.h>
#include "DatabaseHandler.hpp"
#include "game_logic.hpp"

class CarmenSandiegoApp : public Gtk::Window {
public:
    CarmenSandiegoApp();

protected:
    Gtk::Box vbox;
    Gtk::Image logo;
    Gtk::Entry username_entry;
    Gtk::Entry password_entry;
    Gtk::Button login_button;
    Gtk::Label status_label;

    Gtk::Box game_box;
    Gtk::Box clue_box;

    DatabaseHandler db_handler;
    GameLogic* game_logic;

    void on_login_button_clicked();
};

#endif  // CARMEN_SANDIEGO_APP_HPP

################################################################################

Archivo: .\include\DatabaseHandler.hpp
Extensión: .hpp, Tamaño: 307 bytes, Líneas: 15
Contenido (primeros 100000 caracteres):
#ifndef DATABASE_HANDLER_HPP
#define DATABASE_HANDLER_HPP

#include <string>

class DatabaseHandler {
public:
    DatabaseHandler(const std::string& db_path);
    bool autenticar_usuario(const std::string& username, const std::string& password);

private:
    std::string db_path;
};

#endif

################################################################################

Archivo: .\include\game_logic.hpp
Extensión: .hpp, Tamaño: 329 bytes, Líneas: 16
Contenido (primeros 100000 caracteres):
#ifndef GAME_LOGIC_HPP
#define GAME_LOGIC_HPP

#include "DatabaseHandler.hpp"
#include "MultimediaHandler.hpp"

class GameLogic {
public:
    GameLogic(DatabaseHandler &db, MultimediaHandler &mm_handler);

private:
    DatabaseHandler &db_handler;
    MultimediaHandler &mm_handler;
};

#endif  // GAME_LOGIC_HPP

################################################################################

Archivo: .\include\ui.cpp
Extensión: .cpp, Tamaño: 1229 bytes, Líneas: 39
Contenido (primeros 100000 caracteres):
#include "ui.h"

UI::UI() {
    // Inicializar componentes GTK
    window.set_title(Glib::ustring("Carmen Sandiego Game"));
    registerButton.set_label("Register");
    loginButton.set_label("Login");
    startGameButton.set_label("Start Game");

    // Conectar señales
    registerButton.signal_clicked().connect(sigc::mem_fun(*this, &UI::onRegisterButtonClicked));
    loginButton.signal_clicked().connect(sigc::mem_fun(*this, &UI::onLoginButtonClicked));
    startGameButton.signal_clicked().connect(sigc::mem_fun(*this, &UI::onStartGameButtonClicked));
}

void UI::showMainMenu() {
    Gtk::Box *vbox = Gtk::make_managed<Gtk::Box>(Gtk::ORIENTATION_VERTICAL);
    vbox->append(registerButton);
    vbox->append(loginButton);
    vbox->append(startGameButton);

    window.set_child(*vbox);
    window.show_all();
}

void UI::onRegisterButtonClicked() {
    messageLabel.set_text("Register clicked!");
    // Agregar lógica de registro
}

void UI::onLoginButtonClicked() {
    messageLabel.set_text("Login clicked!");
    // Agregar lógica de login
}

void UI::onStartGameButtonClicked() {
    messageLabel.set_text("Starting the game!");
    // Agregar lógica de inicio de juego
}

################################################################################

Archivo: .\include\ui.h (omitido, extensión no relevante)
################################################################################

Directorio: .\misc
================================================================================

Archivo: .\misc\CMakeCXXCompilerId.cpp
Extensión: .cpp, Tamaño: 29378 bytes, Líneas: 920
Contenido (primeros 100000 caracteres):
/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "Arm"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__)) &&                                     \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}


################################################################################

Directorio: .\models
================================================================================

Archivo: .\models\Localidad.cpp
Extensión: .cpp, Tamaño: 1276 bytes, Líneas: 54
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "Localidad.hpp"

// Constructor
Localidad::Localidad(int id, const std::string& nombre, const std::string& descripcion, double latitud, double longitud)
    : id(id), nombre(nombre), descripcion(descripcion), latitud(latitud), longitud(longitud) {}

// Getters
int Localidad::getId() const {
    return id;
}

const std::string& Localidad::getNombre() const {
    return nombre;
}

const std::string& Localidad::getDescripcion() const {
    return descripcion;
}

double Localidad::getLatitud() const {
    return latitud;
}

double Localidad::getLongitud() const {
    return longitud;
}

// Setters
void Localidad::setNombre(const std::string& nombre) {
    this->nombre = nombre;
}

void Localidad::setDescripcion(const std::string& descripcion) {
    this->descripcion = descripcion;
}

void Localidad::setLatitud(double latitud) {
    this->latitud = latitud;
}

void Localidad::setLongitud(double longitud) {
    this->longitud = longitud;
}

// Sobrecarga del operador ==
bool Localidad::operator==(const Localidad& other) const {
    return id == other.id;
}


################################################################################

Archivo: .\models\Localidad.hpp
Extensión: .hpp, Tamaño: 1145 bytes, Líneas: 43
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef LOCALIDAD_HPP
#define LOCALIDAD_HPP

#include <string>

class Localidad {
public:
    // Constructor por defecto
    Localidad() : id(0), nombre(""), descripcion(""), latitud(0.0), longitud(0.0) {}

    // Constructor con parámetros
    Localidad(int id, const std::string& nombre, const std::string& descripcion, double latitud, double longitud);

    // Getters
    int getId() const;
    const std::string& getNombre() const;
    const std::string& getDescripcion() const;
    double getLatitud() const;
    double getLongitud() const;

    // Setters
    void setNombre(const std::string& nombre);
    void setDescripcion(const std::string& descripcion);
    void setLatitud(double latitud);
    void setLongitud(double longitud);

    // Sobrecarga del operador ==
    bool operator==(const Localidad& other) const;

private:
    int id;
    std::string nombre;
    std::string descripcion;
    double latitud;
    double longitud;
};

#endif // LOCALIDAD_HPP


################################################################################

Archivo: .\models\Mision.cpp
Extensión: .cpp, Tamaño: 1111 bytes, Líneas: 46
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "Mision.hpp"

Mision::Mision(int id, const std::string& titulo, const std::string& descripcion, const std::string& objetivo, bool completada)
    : id(id), titulo(titulo), descripcion(descripcion), objetivo(objetivo), completada(completada) {}

int Mision::getId() const {
    return id;
}

std::string Mision::getTitulo() const {
    return titulo;
}

std::string Mision::getDescripcion() const {
    return descripcion;
}

std::string Mision::getObjetivo() const {
    return objetivo;
}

bool Mision::isCompletada() const {
    return completada;
}

void Mision::setTitulo(const std::string& titulo) {
    this->titulo = titulo;
}

void Mision::setDescripcion(const std::string& descripcion) {
    this->descripcion = descripcion;
}

void Mision::setObjetivo(const std::string& objetivo) {
    this->objetivo = objetivo;
}

void Mision::setCompletada(bool completada) {
    this->completada = completada;
}


################################################################################

Archivo: .\models\Mision.hpp
Extensión: .hpp, Tamaño: 879 bytes, Líneas: 34
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef MISION_HPP
#define MISION_HPP

#include <string>

class Mision {
public:
    Mision(int id, const std::string& titulo, const std::string& descripcion, const std::string& objetivo, bool completada);

    int getId() const;
    std::string getTitulo() const;
    std::string getDescripcion() const;
    std::string getObjetivo() const;
    bool isCompletada() const;

    void setTitulo(const std::string& titulo);
    void setDescripcion(const std::string& descripcion);
    void setObjetivo(const std::string& objetivo);
    void setCompletada(bool completada);

private:
    int id;
    std::string titulo;
    std::string descripcion;
    std::string objetivo;
    bool completada;
};

#endif // MISION_HPP


################################################################################

Archivo: .\models\Partida.cpp
Extensión: .cpp, Tamaño: 1030 bytes, Líneas: 48
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "Partida.hpp"

// Constructor
Partida::Partida(int id, int usuarioId, int secuazId, const std::string& estado, int intentos)
    : id(id), usuarioId(usuarioId), secuazId(secuazId), estado(estado), intentos(intentos) {}

// Getters
int Partida::getId() const {
    return id;
}

int Partida::getUsuarioId() const {
    return usuarioId;
}

int Partida::getSecuazId() const {
    return secuazId;
}

std::string Partida::getEstado() const {
    return estado;
}

int Partida::getIntentos() const {
    return intentos;
}

// Setters
void Partida::setUsuarioId(int usuarioId) {
    this->usuarioId = usuarioId;
}

void Partida::setSecuazId(int secuazId) {
    this->secuazId = secuazId;
}

void Partida::setEstado(const std::string& estado) {
    this->estado = estado;
}

void Partida::setIntentos(int intentos) {
    this->intentos = intentos;
}


################################################################################

Archivo: .\models\Partida.hpp
Extensión: .hpp, Tamaño: 769 bytes, Líneas: 34
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef PARTIDA_HPP
#define PARTIDA_HPP

#include <string>

class Partida {
public:
    Partida(int id, int usuarioId, int secuazId, const std::string& estado, int intentos);

    int getId() const;
    int getUsuarioId() const;
    int getSecuazId() const;
    std::string getEstado() const;
    int getIntentos() const;

    void setUsuarioId(int usuarioId);
    void setSecuazId(int secuazId);
    void setEstado(const std::string& estado);
    void setIntentos(int intentos);

private:
    int id;
    int usuarioId;
    int secuazId;
    std::string estado;
    int intentos;
};

#endif // PARTIDA_HPP


################################################################################

Archivo: .\models\Pista.cpp
Extensión: .cpp, Tamaño: 506 bytes, Líneas: 25
Contenido (primeros 100000 caracteres):
#include <sqlite3.h>
#include <iostream>
#include <string>

class Pistas {
public:
    Pistas() {
        sqlite3_open(DB_PATH, &db);
    }

    ~Pistas() {
        sqlite3_close(db);
    }

    void mostrarPistas() {
        const char* sql = "SELECT pista1, pista2, pista3 FROM pistas WHERE secuaz_id = ?1";
        sqlite3_prepare_v2(db, sql, -1, &stmt, 0);

        // Lógica para elegir pistas y mostrar al usuario
    }

private:
    sqlite3* db;
    sqlite3_stmt* stmt;
};

################################################################################

Archivo: .\models\Pista.hpp
Extensión: .hpp, Tamaño: 1067 bytes, Líneas: 31
Contenido (primeros 100000 caracteres):
#ifndef PISTA_HPP
#define PISTA_HPP

#include <string>

class Pista {
    int id;
    int localidadId;
    int numero;
    std::string descripcion;
    bool correcta;

public:
    Pista() : id(0), localidadId(0), numero(0), descripcion(""), correcta(false) {}

    Pista(int id, int localidadId, int numero, const std::string& descripcion, bool correcta)
        : id(id), localidadId(localidadId), numero(numero), descripcion(descripcion), correcta(correcta) {}

    int getId() const { return id; }
    int getLocalidadId() const { return localidadId; }
    int getNumero() const { return numero; }
    std::string getDescripcion() const { return descripcion; }
    bool esCorrecta() const { return correcta; }

    void setLocalidadId(int localidadId) { this->localidadId = localidadId; }
    void setNumero(int numero) { this->numero = numero; }
    void setDescripcion(const std::string& descripcion) { this->descripcion = descripcion; }
    void setEsCorrecta(bool correcta) { this->correcta = correcta; }
};

#endif // PISTA_HPP

################################################################################

Archivo: .\models\Secuaz.cpp
Extensión: .cpp, Tamaño: 1573 bytes, Líneas: 62
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "Secuaz.hpp"

// Implementación de la clase Secuaz

// Constructor por defecto
Secuaz::Secuaz() : id(0), nombre(""), habilidad(""), peligrosidad(0), localidad(nullptr), capturado(false) {}

// Constructor con parámetros
Secuaz::Secuaz(int id, const std::string& nombre, const std::string& habilidad, int peligrosidad, std::shared_ptr<Localidad> localidad, bool capturado)
    : id(id), nombre(nombre), habilidad(habilidad), peligrosidad(peligrosidad), localidad(localidad), capturado(capturado) {}

// Getters
int Secuaz::getId() const {
    return id;
}

std::string Secuaz::getNombre() const {
    return nombre;
}

std::string Secuaz::getHabilidad() const {
    return habilidad;
}

int Secuaz::getPeligrosidad() const {
    return peligrosidad;
}

std::shared_ptr<Localidad> Secuaz::getLocalidad() const {
    return localidad;
}

bool Secuaz::isCapturado() const {
    return capturado;
}

// Setters
void Secuaz::setNombre(const std::string& nombre) {
    this->nombre = nombre;
}

void Secuaz::setHabilidad(const std::string& habilidad) {
    this->habilidad = habilidad;
}

void Secuaz::setPeligrosidad(int peligrosidad) {
    this->peligrosidad = peligrosidad;
}

void Secuaz::setLocalidad(std::shared_ptr<Localidad> localidad) {
    this->localidad = localidad;
}

void Secuaz::setCapturado(bool capturado) {
    this->capturado = capturado;
}


################################################################################

Archivo: .\models\Secuaz.hpp
Extensión: .hpp, Tamaño: 1917 bytes, Líneas: 77
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef SECUAZ_HPP
#define SECUAZ_HPP

#include <string>
#include <memory>
#include "Localidad.hpp" // Asegúrate de que esta clase esté definida

class Secuaz {
private:
    int id;
    std::string nombre;
    std::string habilidad;
    int peligrosidad;
    std::shared_ptr<Localidad> localidad;
    bool capturado;

public:
    // Constructor con parámetros
    Secuaz(int id, const std::string& nombre, const std::string& habilidad, int peligrosidad, std::shared_ptr<Localidad> localidad, bool capturado)
        : id(id), nombre(nombre), habilidad(habilidad), peligrosidad(peligrosidad), localidad(localidad), capturado(capturado) {}

    // Constructor por defecto
    Secuaz() : id(0), nombre(""), habilidad(""), peligrosidad(0), localidad(nullptr), capturado(false) {}

    // Getters
    int getId() const {
        return id;
    }

    std::string getNombre() const {
        return nombre;
    }

    std::string getHabilidad() const {
        return habilidad;
    }

    int getPeligrosidad() const {
        return peligrosidad;
    }

    std::shared_ptr<Localidad> getLocalidad() const {
        return localidad;
    }

    bool isCapturado() const {
        return capturado;
    }

    // Setters
    void setNombre(const std::string& nombre) {
        this->nombre = nombre;
    }

    void setHabilidad(const std::string& habilidad) {
        this->habilidad = habilidad;
    }

    void setPeligrosidad(int peligrosidad) {
        this->peligrosidad = peligrosidad;
    }

    void setLocalidad(std::shared_ptr<Localidad> localidad) {
        this->localidad = localidad;
    }

    void setCapturado(bool capturado) {
        this->capturado = capturado;
    }
};

#endif // SECUAZ_HPP


################################################################################

Archivo: .\models\Usuario.cpp
Extensión: .cpp, Tamaño: 1537 bytes, Líneas: 65
Contenido (primeros 100000 caracteres):
#include <string>
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "Usuario.hpp"

// Constructor
Usuario::Usuario(int id, const std::string& nombre, const std::string& apellido, const std::string& contrasena, const std::string& rango, int capturas, const std::string& progreso)
    : id(id), nombre(nombre), apellido(apellido), contrasena(contrasena), rango(rango), capturas(capturas), progreso(progreso) {}

// Getters
int Usuario::getId() const {
    return id;
}

std::string Usuario::getNombre() const {
    return nombre;
}

std::string Usuario::getApellido() const {
    return apellido;
}

std::string Usuario::getContrasena() const {
    return contrasena;
}

std::string Usuario::getRango() const {
    return rango;
}

int Usuario::getCapturas() const {
    return capturas;
}

std::string Usuario::getProgreso() const {
    return progreso;
}

// Setters
void Usuario::setNombre(const std::string& nombre) {
    this->nombre = nombre;
}

void Usuario::setApellido(const std::string& apellido) {
    this->apellido = apellido;
}

void Usuario::setContrasena(const std::string& contrasena) {
    this->contrasena = contrasena;
}

void Usuario::setRango(const std::string& rango) {
    this->rango = rango;
}

void Usuario::setCapturas(int capturas) {
    this->capturas = capturas;
}

void Usuario::setProgreso(const std::string& progreso) {
    this->progreso = progreso;
}


################################################################################

Archivo: .\models\Usuario.hpp
Extensión: .hpp, Tamaño: 1145 bytes, Líneas: 41
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#ifndef USUARIO_HPP
#define USUARIO_HPP

#include <string>

class Usuario {
public:
    Usuario(int id, const std::string& nombre, const std::string& apellido, const std::string& contrasena, const std::string& rango, int capturas, const std::string& progreso);

    int getId() const;
    std::string getNombre() const;
    std::string getApellido() const;
    std::string getContrasena() const;
    std::string getRango() const;
    int getCapturas() const;
    std::string getProgreso() const;

    void setNombre(const std::string& nombre);
    void setApellido(const std::string& apellido);
    void setContrasena(const std::string& contrasena);
    void setRango(const std::string& rango);
    void setCapturas(int capturas);
    void setProgreso(const std::string& progreso);

private:
    int id;
    std::string nombre;
    std::string apellido;
    std::string contrasena;
    std::string rango;
    int capturas;
    std::string progreso;
};

#endif // USUARIO_HPP



################################################################################

Directorio: .\Multimedia
================================================================================

Archivo: .\Multimedia\Betosecreto.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\CSD.mp3 (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\CSD.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\DetectiveEficiente.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\DetectiveExperto.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\DetectiveJunior.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\DetectiveSenior.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\EllaBella.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\Inspector.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\Medallafinal.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\Mindy Ana Son.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\Moonabomber.png (omitido, extensión no relevante)
################################################################################

Archivo: .\Multimedia\MultimediaHandler.cpp
Extensión: .cpp, Tamaño: 697 bytes, Líneas: 21
Contenido (primeros 100000 caracteres):
#include "MultimediaHandler.hpp"
#include <iostream>

MultimediaHandler::MultimediaHandler() {
    // Constructor - Inicialización de recursos
}

void MultimediaHandler::cargar_imagen(const std::string& ruta_imagen) {
    std::cout << "Cargando imagen desde: " << ruta_imagen << std::endl;
    // Código para cargar y mostrar la imagen
}

void MultimediaHandler::reproducir_sonido(const std::string& ruta_sonido) {
    std::cout << "Reproduciendo sonido desde: " << ruta_sonido << std::endl;
    // Código para reproducir el sonido
}

void MultimediaHandler::detener_sonido() {
    std::cout << "Deteniendo el sonido." << std::endl;
    // Código para detener el sonido
}

################################################################################

Directorio: .\root
================================================================================

Directorio: .\root\.idea
================================================================================

Archivo: .\root\.idea\.gitignore (omitido, extensión no relevante)
################################################################################

Archivo: .\root\.idea\editor.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\root\.idea\modules.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\root\.idea\root.iml (omitido, extensión no relevante)
################################################################################

Archivo: .\root\.idea\workspace.xml (omitido, extensión no relevante)
################################################################################

Directorio: .\src
================================================================================

Archivo: .\src\CarmenSandiegoApp.cpp
Extensión: .cpp, Tamaño: 1230 bytes, Líneas: 39
Contenido (primeros 100000 caracteres):
#include <gtkmm.h>
#include "CarmenSandiegoApp.hpp"

CarmenSandiegoApp::CarmenSandiegoApp()
    : vbox(Gtk::Orientation::VERTICAL),
      login_button("Login"),
      db_handler("H:/TALLER UNO I/SQLite/carmen_sandiego.db"),
      game_logic(nullptr) {

    set_title("Carmen Sandiego - Login");
    set_default_size(400, 300);

    logo.set("Multimedia/csd.png");
    vbox.append(logo);

    username_entry.set_placeholder_text("Nombre");
    password_entry.set_placeholder_text("Contraseña");
    password_entry.set_visibility(false);
    vbox.append(username_entry);
    vbox.append(password_entry);

    vbox.append(login_button);
    login_button.signal_clicked().connect(sigc::mem_fun(*this, &CarmenSandiegoApp::on_login_button_clicked));

    vbox.append(status_label);

    set_child(vbox);
}

void CarmenSandiegoApp::on_login_button_clicked() {
    Glib::ustring username = username_entry.get_text();
    Glib::ustring password = password_entry.get_text();

    if (db_handler.autenticar_usuario(username, password)) {
        status_label.set_text("¡Bienvenido, " + username + "!");
    } else {
        status_label.set_text("Error: Usuario o contraseña incorrectos.");
    }
}

################################################################################

Archivo: .\src\database.cpp
Extensión: .cpp, Tamaño: 1565 bytes, Líneas: 46
Contenido (primeros 100000 caracteres):
#include "database.hpp"
#include <iostream>
#include <sqlite3.h>

// Conexión a la base de datos
void Database::conectar() {
    if (sqlite3_open("carmen_sandiego.db", &db)) {
        std::cerr << "No se pudo abrir la base de datos: " << sqlite3_errmsg(db) << std::endl;
    } else {
        std::cout << "Base de datos abierta correctamente." << std::endl;
    }
}

// Cierre de la base de datos
void Database::cerrar() {
    if (db) {
        sqlite3_close(db);
        db = nullptr;  // Asegurarse de que el puntero esté en null después de cerrar
        std::cout << "Base de datos cerrada correctamente." << std::endl;
    }
}

// Actualizar rango del usuario en la base de datos
void Database::actualizarRango(Usuario& usuario) {
    if (usuario.getCapturas() >= 3) {
        usuario.setRango("Inspector");
    }
    
    const char* sql = "UPDATE Usuarios SET rango = ? WHERE id = ?";
    sqlite3_stmt* stmt;

    if (sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr) == SQLITE_OK) {
        sqlite3_bind_text(stmt, 1, usuario.getRango().c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_int(stmt, 2, usuario.getId());

        if (sqlite3_step(stmt) != SQLITE_DONE) {
            std::cerr << "Error al actualizar el rango: " << sqlite3_errmsg(db) << std::endl;
        } else {
            std::cout << "Rango actualizado correctamente." << std::endl;
        }
    } else {
        std::cerr << "Error al preparar la actualización: " << sqlite3_errmsg(db) << std::endl;
    }

    sqlite3_finalize(stmt);
}

################################################################################

Archivo: .\src\database.hpp
Extensión: .hpp, Tamaño: 296 bytes, Líneas: 17
Contenido (primeros 100000 caracteres):
#ifndef DATABASE_H
#define DATABASE_H

#include <string>
#include <sqlite3.h>
#include "Usuario.hpp"

class Database {
public:
    void conectar();
    void cerrar();
    void actualizarRango(Usuario& usuario);
private:
    sqlite3* db;  // Puntero a la base de datos
};

#endif

################################################################################

Archivo: .\src\DatabaseHandler.cpp
Extensión: .cpp, Tamaño: 283 bytes, Líneas: 8
Contenido (primeros 100000 caracteres):
// src/DatabaseHandler.cpp

#include "DatabaseHandler.hpp"

bool DatabaseHandler::autenticar_usuario(const std::string& /*username*/, const std::string& /*password*/) {
    // Aquí va tu lógica de autenticación
    return true;  // Ajusta esto según tu implementación
}

################################################################################

Archivo: .\src\game_logic.cpp
Extensión: .cpp, Tamaño: 508 bytes, Líneas: 9
Contenido (primeros 100000 caracteres):
#include "game_logic.hpp"  // Incluye el encabezado de GameLogic
#include "DatabaseHandler.hpp"  // Asegúrate de que DatabaseHandler está correctamente implementado
#include "MultimediaHandler.hpp"  // Asegúrate de tener esta clase implementada

// Implementación del constructor de GameLogic
GameLogic::GameLogic(DatabaseHandler &db, MultimediaHandler &mm_handler)
    : db_handler(db), mm_handler(mm_handler) {
    // Inicializa los manejadores de la lógica del juego aquí si es necesario
}

################################################################################

Archivo: .\src\main.cpp
Extensión: .cpp, Tamaño: 350 bytes, Líneas: 16
Contenido (primeros 100000 caracteres):
// src/main.cpp
#include <locale>
#include <iostream>
// src/main.cpp
#include <gtkmm.h>
#include "ui/presentation_window.hpp"
#include "CarmenSandiegoApp.hpp"

int main() {
    auto app = Gtk::Application::create("com.carmen_sandiego.game");

    PresentationWindow presentation_window;

    return app->run(presentation_window);
}


################################################################################

Archivo: .\src\main_presentacion.ppc (omitido, extensión no relevante)
################################################################################

Archivo: .\src\multimedia.cpp
Extensión: .cpp, Tamaño: 280 bytes, Líneas: 8
Contenido (primeros 100000 caracteres):
#include <string>
#include "multimedia.hpp"
#include <cstdlib>

void MultimediaHandler::play_music(const std::string& file_path) {
    std::string command = "play " + file_path;  // Usar 'sox' u otro reproductor en sistemas compatibles
    std::system(command.c_str());
}

################################################################################

Archivo: .\src\multimedia.hpp
Extensión: .hpp, Tamaño: 196 bytes, Líneas: 11
Contenido (primeros 100000 caracteres):
#ifndef MULTIMEDIA_H
#define MULTIMEDIA_H

#include <string>

class MultimediaHandler {
public:
    void play_music(const std::string& file_path);  // Declaración corregida
};

#endif

################################################################################

Archivo: .\src\ui.cpp
Extensión: .cpp, Tamaño: 829 bytes, Líneas: 28
Contenido (primeros 100000 caracteres):
#include "ui.h"
#include <gtkmm.h>
#include "multimedia.h"
#include "database.h"

MainWindow::MainWindow() : vbox(Gtk::ORIENTATION_VERTICAL), login_button("Login") {
    // Inicializar multimedia (música e imágenes)
    MultimediaHandler multimedia;
    multimedia.play_background_music("multimedia/background.mp3");

    // Cargar imagen del detective
    Gtk::Image detective_image("multimedia/detective.png");
    vbox.append(detective_image);

    // Entradas de texto para login
    vbox.append(username_entry);
    vbox.append(password_entry);

    vbox.append(login_button);
    login_button.signal_clicked().connect(sigc::mem_fun(*this, &MainWindow::on_login_button_clicked));

    set_child(vbox);
    
}

void MainWindow::on_login_button_clicked() {
    // Lógica para manejar el login
}

################################################################################

Archivo: .\src\ui.hpp
Extensión: .hpp, Tamaño: 337 bytes, Líneas: 16
Contenido (primeros 100000 caracteres):
#pragma once
#include <gtkmm.h>

class UI {
public:
    UI();
    void showMainMenu();
    void onRegisterButtonClicked();
    void onLoginButtonClicked();
    void onStartGameButtonClicked();

private:
    Gtk::Window window;
    Gtk::Button registerButton, loginButton, startGameButton;
    Gtk::Label messageLabel;
};

################################################################################

Archivo: .\src\Usuario.cpp
Extensión: .cpp, Tamaño: 1385 bytes, Líneas: 59
Contenido (primeros 100000 caracteres):
#include "Usuario.hpp"

// Constructor
Usuario::Usuario(int id, const std::string& nombre, const std::string& apellido, const std::string& contrasena, const std::string& rango, int capturas, const std::string& progreso)
    : id(id), nombre(nombre), apellido(apellido), contrasena(contrasena), rango(rango), capturas(capturas), progreso(progreso) {}

// Getters
int Usuario::getId() const {
    return id;
}

std::string Usuario::getNombre() const {
    return nombre;
}

std::string Usuario::getApellido() const {
    return apellido;
}

std::string Usuario::getContrasena() const {
    return contrasena;
}

std::string Usuario::getRango() const {
    return rango;
}

int Usuario::getCapturas() const {
    return capturas;
}

std::string Usuario::getProgreso() const {
    return progreso;
}

// Setters
void Usuario::setNombre(const std::string& nombre) {
    this->nombre = nombre;
}

void Usuario::setApellido(const std::string& apellido) {
    this->apellido = apellido;
}

void Usuario::setContrasena(const std::string& contrasena) {
    this->contrasena = contrasena;
}

void Usuario::setRango(const std::string& rango) {
    this->rango = rango;
}

void Usuario::setCapturas(int capturas) {
    this->capturas = capturas;
}

void Usuario::setProgreso(const std::string& progreso) {
    this->progreso = progreso;
}

################################################################################

Archivo: .\src\Usuario.hpp
Extensión: .hpp, Tamaño: 995 bytes, Líneas: 35
Contenido (primeros 100000 caracteres):
#ifndef USUARIO_HPP
#define USUARIO_HPP

#include <string>

class Usuario {
public:
    Usuario(int id, const std::string& nombre, const std::string& apellido, const std::string& contrasena, const std::string& rango, int capturas, const std::string& progreso);

    int getId() const;
    std::string getNombre() const;
    std::string getApellido() const;
    std::string getContrasena() const;
    std::string getRango() const;
    int getCapturas() const;
    std::string getProgreso() const;

    void setNombre(const std::string& nombre);
    void setApellido(const std::string& apellido);
    void setContrasena(const std::string& contrasena);
    void setRango(const std::string& rango);
    void setCapturas(int capturas);
    void setProgreso(const std::string& progreso);

private:
    int id;
    std::string nombre;
    std::string apellido;
    std::string contrasena;
    std::string rango;
    int capturas;
    std::string progreso;
};

#endif

################################################################################

Directorio: .\src\.idea
================================================================================

Archivo: .\src\.idea\editor.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\src\.idea\modules.xml (omitido, extensión no relevante)
################################################################################

Archivo: .\src\.idea\src.iml (omitido, extensión no relevante)
################################################################################

Archivo: .\src\.idea\workspace.xml (omitido, extensión no relevante)
################################################################################

Directorio: .\src\app
================================================================================

Archivo: .\src\app\main.cpp
Extensión: .cpp, Tamaño: 1077 bytes, Líneas: 35
Contenido (primeros 100000 caracteres):
#include <gtkmm.h>
#include <iostream>

// Clase WelcomeWindow que incluye la funcionalidad del botón para iniciar presentación
class WelcomeWindow : public Gtk::Window {
public:
    WelcomeWindow() : m_button("Iniciar presentación") {
        set_title("Bienvenido a Carmen Sandiego");
        set_default_size(800, 600);

        auto vbox = Gtk::make_managed<Gtk::Box>(Gtk::Orientation::VERTICAL, 10);
        set_child(*vbox);

        vbox->append(m_button);
        m_button.signal_clicked().connect(sigc::mem_fun(*this, &WelcomeWindow::on_button_clicked));
    }

protected:
    void on_button_clicked() {
        std::cout << "Presentación iniciada" << std::endl;
        hide();  // Ocultar la ventana actual
        // Lógica para cambiar a la siguiente ventana
    }

    Gtk::Button m_button;
};

// Función principal que ejecuta la aplicación
int main(int argc, char *argv[]) {
    auto app = Gtk::Application::create("org.gtkmm.carmensandiego");

    WelcomeWindow welcome_window;

    return app->run(welcome_window);
}

################################################################################

Archivo: .\src\app\WelcomeWindow.cpp
Extensión: .cpp, Tamaño: 6381 bytes, Líneas: 192
Contenido (primeros 100000 caracteres):
#include <gtkmm.h>
#include <iostream>
#include <sqlite3.h>
#include <gstreamer-1.0/gst/gst.h>
#include <random>

// Ventana de bienvenida y presentación
class WelcomeWindow : public Gtk::Window {
public:
    WelcomeWindow() : m_button("Iniciar presentación") {
        set_title("Bienvenido a Carmen Sandiego");
        set_default_size(800, 600);

        auto vbox = Gtk::make_managed<Gtk::Box>(Gtk::Orientation::VERTICAL, 10);
        set_child(*vbox);

        vbox->append(m_button);
        m_button.signal_clicked().connect(sigc::mem_fun(*this, &WelcomeWindow::on_button_clicked));
    }

protected:
    void on_button_clicked() {
        std::cout << "Presentación iniciada" << std::endl;
        hide();  // Ocultar la ventana actual

        auto auth_window = new AuthWindow();
        auth_window->show();
    }

    Gtk::Button m_button;
};

// Ventana de autenticación de usuarios
class AuthWindow : public Gtk::Window {
public:
    AuthWindow() : m_button_login("Iniciar sesión"), m_button_register("Registrarse") {
        set_title("Autenticación de Usuario");
        set_default_size(400, 300);

        auto vbox = Gtk::make_managed<Gtk::Box>(Gtk::Orientation::VERTICAL, 10);
        set_child(*vbox);

        vbox->append(m_entry_user);
        vbox->append(m_entry_pass);
        vbox->append(m_button_login);
        vbox->append(m_button_register);

        m_button_login.signal_clicked().connect(sigc::mem_fun(*this, &AuthWindow::on_login_clicked));
        m_button_register.signal_clicked().connect(sigc::mem_fun(*this, &AuthWindow::on_register_clicked));

        // Abrir la base de datos SQLite
        if (sqlite3_open("carmen_sandiego.db", &db)) {
            std::cerr << "Error al abrir la base de datos: " << sqlite3_errmsg(db) << std::endl;
        }
    }

    ~AuthWindow() {
        sqlite3_close(db);
    }

protected:
    Gtk::Entry m_entry_user;
    Gtk::Entry m_entry_pass;
    Gtk::Button m_button_login;
    Gtk::Button m_button_register;
    sqlite3 *db;

    void on_login_clicked() {
        std::string user = m_entry_user.get_text();
        std::string pass = m_entry_pass.get_text();

        if (authenticate_user(user, pass)) {
            std::cout << "Inicio de sesión exitoso" << std::endl;
            hide();
            // Mostrar ventana de juego
            auto game_window = new GameWindow(db);
            game_window->show();
        } else {
            std::cerr << "Error de autenticación" << std::endl;
        }
    }

    void on_register_clicked() {
        std::string user = m_entry_user.get_text();
        std::string pass = m_entry_pass.get_text();

        if (register_user(user, pass)) {
            std::cout << "Usuario registrado exitosamente" << std::endl;
        } else {
            std::cerr << "Error al registrar usuario" << std::endl;
        }
    }

    bool authenticate_user(const std::string &username, const std::string &password) {
        std::string query = "SELECT * FROM users WHERE username = ? AND password = ?";
        sqlite3_stmt *stmt;
        if (sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, nullptr) == SQLITE_OK) {
            sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
            sqlite3_bind_text(stmt, 2, password.c_str(), -1, SQLITE_STATIC);

            if (sqlite3_step(stmt) == SQLITE_ROW) {
                sqlite3_finalize(stmt);
                return true;
            }
        }
        sqlite3_finalize(stmt);
        return false;
    }

    bool register_user(const std::string &username, const std::string &password) {
        std::string query = "INSERT INTO users (username, password) VALUES (?, ?)";
        sqlite3_stmt *stmt;
        if (sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, nullptr) == SQLITE_OK) {
            sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
            sqlite3_bind_text(stmt, 2, password.c_str(), -1, SQLITE_STATIC);

            if (sqlite3_step(stmt) == SQLITE_DONE) {
                sqlite3_finalize(stmt);
                return true;
            }
        }
        sqlite3_finalize(stmt);
        return false;
    }
};

// Ventana de juego donde se muestran pistas y secuaces
class GameWindow : public Gtk::Window {
public:
    GameWindow(sqlite3 *db) : m_button("Generar Pistas") {
        set_title("Juego Carmen Sandiego");
        set_default_size(800, 600);

        this->db = db;
        auto vbox = Gtk::make_managed<Gtk::Box>(Gtk::Orientation::VERTICAL, 10);
        set_child(*vbox);

        vbox->append(m_button);
        vbox->append(m_label);

        m_button.signal_clicked().connect(sigc::mem_fun(*this, &GameWindow::on_button_clicked));
    }

protected:
    Gtk::Button m_button;
    Gtk::Label m_label;
    sqlite3 *db;

    void on_button_clicked() {
        std::string pista = get_random_pista();
        std::cout << "Pista generada: " << pista << std::endl;
        m_label.set_text(pista);
    }

    // Obtener una pista aleatoria de la base de datos
    std::string get_random_pista() {
        std::string query = "SELECT pista FROM pistas ORDER BY RANDOM() LIMIT 1";
        sqlite3_stmt *stmt;
        std::string pista;

        if (sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, nullptr) == SQLITE_OK) {
            if (sqlite3_step(stmt) == SQLITE_ROW) {
                pista = reinterpret_cast<const char *>(sqlite3_column_text(stmt, 0));
            }
        }

        sqlite3_finalize(stmt);
        return pista;
    }
};

// Función para iniciar GStreamer y reproducir música de fondo
void play_background_music(const std::string &file_path) {
    GstElement *pipeline = gst_parse_launch(("playbin uri=file://" + file_path).c_str(), nullptr);
    gst_element_set_state(pipeline, GST_STATE_PLAYING);
}

// Función principal que ejecuta la aplicación
int main(int argc, char *argv[]) {
    // Inicializar GStreamer
    gst_init(&argc, &argv);

    auto app = Gtk::Application::create("org.gtkmm.carmensandiego");

    // Iniciar música de fondo
    play_background_music("assets/AUDIO/CSD.mp3");

    // Iniciar la ventana de bienvenida
    WelcomeWindow welcome_window;

    return app->run(welcome_window);
}

################################################################################

Archivo: .\src\app\WelcomeWindow.hpp
Extensión: .hpp, Tamaño: 403 bytes, Líneas: 17
Contenido (primeros 100000 caracteres):
#ifndef WELCOME_WINDOW_HPP
#define WELCOME_WINDOW_HPP

#include <gtkmm.h>

class WelcomeWindow : public Gtk::Window {
public:
    WelcomeWindow();
    virtual ~WelcomeWindow() = default;

protected:
    void on_button_clicked();  // Función para manejar el evento del clic en el botón

    Gtk::Button m_button;  // Botón en la ventana de bienvenida
};

#endif // WELCOME_WINDOW_HPP

################################################################################

Directorio: .\src\assets
================================================================================

Directorio: .\src\assets\audio
================================================================================

Archivo: .\src\assets\audio\CSD.mp3 (omitido, extensión no relevante)
################################################################################

Directorio: .\src\core
================================================================================

Archivo: .\src\core\game_controller.cpp
Extensión: .cpp, Tamaño: 377 bytes, Líneas: 11
Contenido (primeros 100000 caracteres):
#include "core/game_controller.hpp"

// Constructor actualizado sin TTSManager ni gameService
GameController::GameController(DatabaseHandler& dbHandler)
    : dbHandler(dbHandler), gameWindow() {  // Asegurarse de inicializar la referencia dbHandler
    // Lógica de inicialización si es necesaria
}

void GameController::iniciarJuego() {
    gameWindow.show();
}

################################################################################

Archivo: .\src\core\game_controller.hpp
Extensión: .hpp, Tamaño: 438 bytes, Líneas: 17
Contenido (primeros 100000 caracteres):
#ifndef GAME_CONTROLLER_HPP
#define GAME_CONTROLLER_HPP

#include "database/DatabaseHandler.hpp"
#include "ui/game_window.hpp"

class GameController {
public:
    GameController(DatabaseHandler& dbHandler);  // Constructor sin TTSManager
    void iniciarJuego();

private:
    GameWindow gameWindow;
    DatabaseHandler& dbHandler;  // Asegurarse de que la referencia est√© declarada
};

#endif // GAME_CONTROLLER_HPP

################################################################################

Archivo: .\src\core\game_logic.cpp
Extensión: .cpp, Tamaño: 1390 bytes, Líneas: 35
Contenido (primeros 100000 caracteres):
#include "utils/random_utils.hpp"  // Incluir para usar generarNumeroLocalidadAleatorio
#include <iostream>
#include <algorithm>
#include <stdexcept>
#include "dao/PistaDAO.hpp"
#include "dao/SecuazDAO.hpp"
#include "game_logic.hpp"
#include "utils/game_utils.hpp"
#include <gtkmm.h>

std::vector<Pista> seleccionarPistas(const std::vector<Pista>& pistas) {
    std::vector<Pista> seleccionadas;

    if (pistas.size() < 5) {
        throw std::runtime_error("No hay suficientes pistas disponibles para seleccionar.");
    }

    std::sample(pistas.begin(), pistas.begin() + 4, std::back_inserter(seleccionadas), 2, obtenerGeneradorAleatorio());
    seleccionadas.push_back(pistas.back());
    return seleccionadas;
}

void GameLogic::iniciarMision(int localidadId, const Secuaz& secuaz) {
    std::vector<Pista> pistas = PistaDAO::obtenerPistasParaLocalidad(localidadId, db_handler.getDatabase());

    if (pistas.empty()) {
        throw std::runtime_error("No se encontraron pistas para la localidad especificada.");
    }

    int numeroLocalidadAleatorio = generarNumeroLocalidadAleatorio();  // Número aleatorio de 1 a 40
    std::cout << "Número de localidad aleatorio: " << numeroLocalidadAleatorio << std::endl;

    std::vector<Pista> pistasSeleccionadas = seleccionarPistas(pistas);
    mostrarPistasAlJugador(pistasSeleccionadas, secuaz);
}

################################################################################

Archivo: .\src\core\game_logic.hpp
Extensión: .hpp, Tamaño: 493 bytes, Líneas: 21
Contenido (primeros 100000 caracteres):
#ifndef GAME_LOGIC_HPP
#define GAME_LOGIC_HPP

#include <string>
#include <vector>
#include "DatabaseHandler.hpp"

// Clase que maneja la lógica del juego
class GameLogic {
public:
    GameLogic(DatabaseHandler& dbHandler);

    // Métodos principales del juego
    std::vector<std::string> obtenerPistas(int localidadId);
    bool verificarRespuesta(int localidadId, const std::string& respuesta);

private:
    DatabaseHandler& dbHandler;
};

#endif // GAME_LOGIC_HPP

################################################################################

Directorio: .\Testing
================================================================================

Directorio: .\Testing\Temporary
================================================================================

Archivo: .\Testing\Temporary\LastTest.log (omitido, extensión no relevante)
################################################################################

Directorio: .\tts
================================================================================

Archivo: .\tts\TTSConfig.cpp
Extensión: .cpp, Tamaño: 817 bytes, Líneas: 37
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
// tts/TTSConfig.cpp
#include "TTSConfig.hpp"

// Constructor
TTSConfig::TTSConfig(const std::string& idioma, int velocidad, int volumen)
    : idioma(idioma), velocidad(velocidad), volumen(volumen) {}

// Getters
std::string TTSConfig::getIdioma() const {
    return idioma;
}

int TTSConfig::getVelocidad() const {
    return velocidad;
}

int TTSConfig::getVolumen() const {
    return volumen;
}

// Setters
void TTSConfig::setIdioma(const std::string& idioma) {
    this->idioma = idioma;
}

void TTSConfig::setVelocidad(int velocidad) {
    this->velocidad = velocidad;
}

void TTSConfig::setVolumen(int volumen) {
    this->volumen = volumen;
}


################################################################################

Archivo: .\tts\TTSConfig.hpp
Extensión: .hpp, Tamaño: 656 bytes, Líneas: 30
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
// Archivo: TTSConfig.hpp
#ifndef TTSCONFIG_HPP
#define TTSCONFIG_HPP

#include <string>

class TTSConfig {
public:
    TTSConfig(const std::string& idioma, int velocidad, int volumen);

    std::string getIdioma() const;
    int getVelocidad() const;
    int getVolumen() const;

    void setIdioma(const std::string& idioma);
    void setVelocidad(int velocidad);
    void setVolumen(int volumen);

private:
    std::string idioma;
    int velocidad;
    int volumen;
};

#endif // TTSCONFIG_HPP


################################################################################

Archivo: .\tts\TTSManager.cpp
Extensión: .cpp, Tamaño: 1307 bytes, Líneas: 43
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
// Archivo: TTSManager.cpp
#include "TTSManager.hpp"
#include <iostream>

// Constructor que recibe la configuración del TTS
TTSManager::TTSManager(const TTSConfig& config)
    : config(config) {
    inicializarTTS();
    aplicarConfiguracion();
}

// Método para convertir texto a voz
void TTSManager::speak(const std::string& texto) {
    std::cout << "TTS: " << texto << std::endl;  // Simulación de TTS
}

// Método para establecer una nueva configuración
void TTSManager::setConfig(const TTSConfig& nuevaConfig) {
    this->config = nuevaConfig;
    aplicarConfiguracion();
}

// Método para obtener la configuración actual
TTSConfig TTSManager::getConfig() const {
    return config;
}

// Inicialización del sistema TTS
void TTSManager::inicializarTTS() {
    std::cout << "Inicializando TTS con idioma: " << config.getIdioma() << std::endl;
}

// Aplicar la configuración del TTS
void TTSManager::aplicarConfiguracion() {
    std::cout << "Configurando TTS - Idioma: " << config.getIdioma()
              << ", Velocidad: " << config.getVelocidad()
              << ", Volumen: " << config.getVolumen() << std::endl;
}


################################################################################

Archivo: .\tts\TTSManager.hpp
Extensión: .hpp, Tamaño: 867 bytes, Líneas: 28
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
// Archivo: TTSManager.hpp
#ifndef TTSMANAGER_HPP
#define TTSMANAGER_HPP

#include <string>
#include "TTSConfig.hpp"

class TTSManager {
public:
    TTSManager(const TTSConfig& config);  // Constructor que recibe la configuración de TTS

    void speak(const std::string& texto);  // Método para convertir texto a voz
    void setConfig(const TTSConfig& config);  // Cambiar la configuración del TTS
    TTSConfig getConfig() const;  // Obtener la configuración actual

private:
    TTSConfig config;  // Almacena la configuración del TTS

    void inicializarTTS();  // Inicializa el sistema de TTS
    void aplicarConfiguracion();  // Aplica la configuración al sistema TTS
};

#endif // TTSMANAGER_HPP


################################################################################

Directorio: .\ui
================================================================================

Archivo: .\ui\game_window.cpp
Extensión: .cpp, Tamaño: 3446 bytes, Líneas: 100
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "game_window.hpp"
#include <iostream>

GameWindow::GameWindow(std::shared_ptr<TTSManager> ttsManager)
    : ttsManager(ttsManager) {  // Inicializar ttsManager
    set_title(Glib::ustring("Pero...¿Dónde en Colonia está Carmen Sandiego?"));
    set_default_size(800, 600);

    mainBox.set_orientation(Gtk::ORIENTATION_VERTICAL);
    set_child(mainBox);

    // Estado del juego
    estadoLabel.set_text("Estado del juego:");
    mainBox.append(estadoLabel, Gtk::PACK_SHRINK);

    // Área de texto para las pistas
    pistasTextView.set_editable(false);
    mainBox.append(pistasTextView);

    // Botones de acción
    botonCapturar.set_label("Capturar Secuaz");
    botonCapturar.signal_clicked().connect(sigc::mem_fun(*this, &GameWindow::on_botonAccion_clicked));
    mainBox.append(botonCapturar, Gtk::PACK_SHRINK);

    botonMover.set_label("Mover Secuaz");
    botonMover.signal_clicked().connect(sigc::mem_fun(*this, &GameWindow::on_botonAccion_clicked));
    mainBox.append(botonMover, Gtk::PACK_SHRINK);

    
}

// Destructor
GameWindow::~GameWindow() {}

// Mostrar pistas en el TextView
void GameWindow::mostrarPistas(const std::vector<std::string>& pistas) {
    auto buffer = pistasTextView.get_buffer();
    buffer->set_text("");  // Limpiar el buffer

    for (const auto& pista : pistas) {
        buffer->insert(buffer->end(), pista + "\n");
    }
}

// Actualizar el estado del juego
void GameWindow::actualizarEstado(const std::string& estado) {
    estadoLabel.set_text("Estado del juego: " + estado);
}

// Mostrar mensaje usando TTS y un diálogo
void GameWindow::mostrarMensaje(const std::string& mensaje) {
    ttsManager->speak(mensaje);  // Usar ttsManager para hablar
    Gtk::MessageDialog dialog(*this, mensaje);
    dialog.run();
}

// Manejar evento de botones Capturar y Mover
void GameWindow::on_botonAccion_clicked() {
    Gtk::Button* button = dynamic_cast<Gtk::Button*>(get_focus_widget());
    if (button == &botonCapturar) {
        std::cout << "Botón Capturar Secuaz presionado" << std::endl;
    } else if (button == &botonMover) {
        std::cout << "Botón Mover Secuaz presionado" << std::endl;
    }
}

// Manejar teclas S, D, F y clics en botones de pista
bool GameWindow::on_key_press_event(GdkEventKey* event) {
    constexpr guint tecla_s = GDK_KEY_s;
    constexpr guint tecla_d = GDK_KEY_d;
    constexpr guint tecla_f = GDK_KEY_f;

    switch (event->keyval) {
        case tecla_s:
            on_button_pista_clicked(pista_1_button);
            break;
        case tecla_d:
            on_button_pista_clicked(pista_2_button);
            break;
        case tecla_f:
            on_button_pista_clicked(pista_3_button);
            break;
        default:
            return Gtk::Window::on_key_press_event(event); // Mantener el manejo de otros eventos de teclas
    }
    return true;  // Evitar otros manejadores para las teclas S, D, F
}

// Lógica cuando se selecciona una pista
void GameWindow::on_button_pista_clicked(Gtk::Button* pista_button) {
    if (pista_button == pista_correcta_button) {
        mostrarMensaje("Adelante, te estás acercando.");
    } else {
        mostrarMensaje("Tienes otra oportunidad. Cuídala.");
    }
}

################################################################################

Archivo: .\ui\game_window.hpp
Extensión: .hpp, Tamaño: 880 bytes, Líneas: 33
Contenido (primeros 100000 caracteres):
#ifndef GAME_WINDOW_HPP
#define GAME_WINDOW_HPP

#include <gtkmm.h>
#include <vector>
#include <string>
#include <memory>
#include "TTSManager.hpp"  // Incluir TTSManager

class GameWindow : public Gtk::Window {
public:
    GameWindow(std::shared_ptr<TTSManager> ttsManager);  // Añadir ttsManager al constructor
    virtual ~GameWindow();

    void mostrarPistas(const std::vector<std::string>& pistas);
    void actualizarEstado(const std::string& estado);
    void mostrarMensaje(const std::string& mensaje);

private:
    Gtk::Box mainBox;
    Gtk::Label estadoLabel;
    Gtk::TextView pistasTextView;
    Gtk::Button botonCapturar;
    Gtk::Button botonMover;

    std::shared_ptr<TTSManager> ttsManager;  // Declarar el TTSManager aquí

    void on_botonCapturar_clicked();
    void on_botonMover_clicked();
};

#endif // GAME_WINDOW_HPP


################################################################################

Archivo: .\ui\main_window.cpp
Extensión: .cpp, Tamaño: 1450 bytes, Líneas: 44
Contenido (primeros 100000 caracteres):
// Cabecera añadida automáticamente por torquemada.py
#include <gtkmm/button.h>
#include <gtkmm/window.h>
#include <gtkmm.h>
#include "main_window.hpp"
#include <iostream>

// Constructor
MainWindow::MainWindow(std::shared_ptr<GameController> gameController)
    : gameController(gameController) {
    set_title(Glib::ustring("Pero... ¿Dónde en Colonia está Carmen Sandiego?"));
    set_default_size(800, 600);

    mainBox.set_orientation(Gtk::ORIENTATION_VERTICAL);
    set_child(mainBox);

    // Botón para iniciar el juego
    botonIniciarJuego.set_label("Iniciar Juego");
    botonIniciarJuego.signal_clicked().connect(sigc::mem_fun(*this, &MainWindow::on_botonIniciarJuego_clicked));
    mainBox.append(botonIniciarJuego, Gtk::PACK_SHRINK);

    // Botón para salir del juego
    botonSalir.set_label("Salir");
    botonSalir.signal_clicked().connect(sigc::mem_fun(*this, &MainWindow::on_botonSalir_clicked));
    mainBox.append(botonSalir, Gtk::PACK_SHRINK);

    
}

// Destructor
MainWindow::~MainWindow() {}

// Función para manejar el botón de "Iniciar Juego"
void MainWindow::on_botonIniciarJuego_clicked() {
    std::cout << "Iniciando el juego..." << std::endl;
    gameController->iniciarJuego();
}

// Función para manejar el botón de "Salir"
void MainWindow::on_botonSalir_clicked() {
    std::cout << "Saliendo del juego..." << std::endl;
    hide();  // Cerrar la ventana
}


################################################################################

Archivo: .\ui\main_window.hpp
Extensión: .hpp, Tamaño: 663 bytes, Líneas: 26
Contenido (primeros 100000 caracteres):
#ifndef MAIN_WINDOW_HPP
#define MAIN_WINDOW_HPP

#include <gtkmm.h>
#include <memory>
#include "game_controller.hpp"

class MainWindow : public Gtk::Window {
public:
    MainWindow(std::shared_ptr<GameController> gameController);  // Constructor que recibe GameController
    virtual ~MainWindow();

private:
    Gtk::Box mainBox;
    Gtk::Button botonIniciarJuego;
    Gtk::Button botonSalir;

    std::shared_ptr<GameController> gameController;  // Controlador de juego

    // Funciones para manejar las señales de los botones
    void on_botonIniciarJuego_clicked();
    void on_botonSalir_clicked();
};

#endif // MAIN_WINDOW_HPP


################################################################################

Archivo: .\ui\presentation_window.cpp
Extensión: .cpp, Tamaño: 1221 bytes, Líneas: 46
Contenido (primeros 100000 caracteres):
#include "presentation_window.hpp"
#include <glibmm/main.h>
#include "CarmenSandiegoApp.hpp"

PresentationWindow::PresentationWindow() 
    : vbox(Gtk::Orientation::VERTICAL), 
      current_image_index(0) {

    set_title("Carmen Sandiego - Presentación");
    set_default_size(800, 600);

    image_paths = {
        "Multimedia/presentation1.png",
        "Multimedia/presentation2.png",
        "Multimedia/presentation3.png"
    };

    vbox.append(img);
    set_child(vbox);

    show_next_image();
    timer = Glib::signal_timeout().connect(sigc::mem_fun(*this, &PresentationWindow::on_switch_image), 2000);
}

void PresentationWindow::show_next_image() {
    if (current_image_index < static_cast<int>(image_paths.size())) {
        img.set(image_paths[current_image_index]);
        current_image_index++;
    } else {
        switch_to_login();
    }
}

bool PresentationWindow::on_switch_image() {
    show_next_image();
    return true;
}

void PresentationWindow::switch_to_login() {
    timer.disconnect();
    CarmenSandiegoApp* login_window = new CarmenSandiegoApp();
    login_window->present();
    close();
}

PresentationWindow::~PresentationWindow() {}

################################################################################

Archivo: .\ui\presentation_window.hpp
Extensión: .hpp, Tamaño: 552 bytes, Líneas: 27
Contenido (primeros 100000 caracteres):
// ui/presentation_window.hpp
#ifndef PRESENTATION_WINDOW_HPP
#define PRESENTATION_WINDOW_HPP

#include <gtkmm.h>
#include <vector>

class PresentationWindow : public Gtk::Window {
public:
    PresentationWindow();
    virtual ~PresentationWindow();

protected:
    void show_next_image();
    bool on_switch_image();

    Gtk::Box vbox;
    Gtk::Image img;

    sigc::connection timer;
    std::vector<std::string> image_paths;
    int current_image_index;

    void switch_to_login();
};

#endif // PRESENTATION_WINDOW_HPP

################################################################################

Archivo: .\ui\registration_window.cpp
Extensión: .cpp, Tamaño: 2317 bytes, Líneas: 69
Contenido (primeros 100000 caracteres):
// ui/presentation_window.cpp

#include "presentation_window.hpp"
#include <iostream>
#include <glibmm/main.h>

PresentationWindow::PresentationWindow() 
    : vbox(Gtk::Orientation::VERTICAL), button("Iniciar Juego"), current_image_index(0) {

    set_title("Bienvenido a Carmen Sandiego");
    set_default_size(600, 400);

    // Añadir texto de bienvenida
    label.set_text("Bienvenido al juego de: Pero, ¿Dónde, en Colonia, está Carmen Sandiego?");
    label.set_halign(Gtk::Align::CENTER);
    label.set_margin_top(10);
    label.set_margin_bottom(20);
    vbox.append(label);

    // Cargar imágenes para el carrusel
    image_paths = {
        "Multimedia/DetectiveJunior.png",
        "Multimedia/DetectiveExperto.png",
        "Multimedia/Betosecreto.png",
        "Multimedia/EllaBella.png"
    };
    img.set(image_paths[current_image_index]);
    vbox.append(img);

    // Configurar el temporizador para cambiar de imagen cada 1,5 segundos
    timer = Glib::signal_timeout().connect(sigc::mem_fun(*this, &PresentationWindow::on_switch_image), 1500);

    // Añadir botón de iniciar
    button.signal_clicked().connect(sigc::mem_fun(*this, &PresentationWindow::on_button_clicked));
    vbox.append(button);

    // Establecer el layout
    set_child(vbox);

    // Iniciar la música
    play_music();
}

PresentationWindow::~PresentationWindow() {
    // Desconectar el temporizador al cerrar la ventana
    timer.disconnect();
}

void PresentationWindow::on_button_clicked() {
    // Aquí se cierra la ventana de presentación y se inicia el juego
    std::cout << "Iniciar juego presionado" << std::endl;
    close();
}

bool PresentationWindow::on_switch_image() {
    // Cambiar a la siguiente imagen del carrusel
    current_image_index = (current_image_index + 1) % image_paths.size();
    img.set(image_paths[current_image_index]);
    return true; // Mantener el temporizador activo
}

void PresentationWindow::play_music() {
    // Inicializar GStreamer
    gst_init(nullptr, nullptr);

    // Crear un pipeline de reproducción para el archivo MP3
    GstElement *pipeline = gst_parse_launch("playbin uri=file:///ruta/absoluta/Multimedia/CSD.mp3", nullptr);
    gst_element_set_state(pipeline, GST_STATE_PLAYING);
}

################################################################################

Archivo: .\ui\registration_window.hpp
Extensión: .hpp, Tamaño: 657 bytes, Líneas: 28
Contenido (primeros 100000 caracteres):
#ifndef REGISTRATION_WINDOW_HPP
#define REGISTRATION_WINDOW_HPP

#include <gtkmm.h>
#include <memory>
#include "UsuarioDAO.hpp"

class RegistrationWindow : public Gtk::Window {
public:
    RegistrationWindow(std::shared_ptr<UsuarioDAO> usuarioDAO);
    virtual ~RegistrationWindow();

private:
    Gtk::Box mainBox;
    Gtk::Entry nombreEntry;
    Gtk::Entry apellidoEntry;
    Gtk::Entry contrasenaEntry;
    Gtk::Button botonRegistrar;
    Gtk::Button botonCancelar;

    std::shared_ptr<UsuarioDAO> usuarioDAO;

    void on_botonRegistrar_clicked();
    void on_botonCancelar_clicked();
};

#endif // REGISTRATION_WINDOW_HPP


################################################################################

Archivo: .\ui\result_window.cpp
Extensión: .cpp, Tamaño: 2127 bytes, Líneas: 56
Contenido (primeros 100000 caracteres):
// Archivo: result_window.cpp
#include "result_window.hpp"
#include <gtkmm/messagedialog.h>
#include <iostream>

ResultWindow::ResultWindow(const std::vector<Jugador>& jugadores, const std::string& usuarioActual)
    : jugadores(jugadores), usuarioActual(usuarioActual) {
    
    set_title(Glib::ustring("Resultados del Juego"));
    set_default_size(600, 400);

    // Crear lista de puntajes
    liststore = Gtk::ListStore::create();
    treeview.set_model(liststore);
    
    // Añadir columnas a la tabla
    treeview.append_column("Jugador", ...);  // Añadir el nombre del jugador
    treeview.append_column("Rango", ...);    // Añadir el rango del jugador
    treeview.append_column("Puntaje", ...);  // Añadir el puntaje

    // Llenar la tabla con los datos de los jugadores
    for (const auto& jugador : jugadores) {
        Gtk::TreeModel::Row row = *(liststore->append());
        row[...];  // Asignar nombre del jugador
        row[...];  // Asignar rango
        row[...];  // Asignar puntaje

        // Hacer que el clic en el jugador dispare una señal
        if (jugador.nombre == usuarioActual) {
            treeview.signal_row_activated().connect(
                sigc::bind(sigc::mem_fun(*this, &ResultWindow::on_jugador_clicked), jugador.nombre));
        }
    }

    set_child(treeview);
    
}

ResultWindow::~ResultWindow() {}

void ResultWindow::on_jugador_clicked(const std::string& nombreJugador) {
    if (nombreJugador == usuarioActual) {
        // Mostrar las respuestas equivocadas y correctas del usuario actual
        for (const auto& jugador : jugadores) {
            if (jugador.nombre == nombreJugador) {
                std::string detalle = "Respuestas incorrectas y correctas:\n";
                for (const auto& respuesta : jugador.respuestas) {
                    detalle += "Equivocada: " + respuesta.first + ", Correcta: " + respuesta.second + "\n";
                }
                Gtk::MessageDialog dialog(*this, detalle);
                dialog.run();
                break;
            }
        }
    }
}

################################################################################

Archivo: .\ui\result_window.hpp
Extensión: .hpp, Tamaño: 797 bytes, Líneas: 32
Contenido (primeros 100000 caracteres):
// Archivo: result_window.hpp
#ifndef RESULT_WINDOW_HPP
#define RESULT_WINDOW_HPP

#include <gtkmm.h>
#include <vector>
#include <string>

struct Jugador {
    std::string nombre;
    std::string rango;
    int puntaje;
    std::vector<std::pair<std::string, std::string>> respuestas;  // (equivocada, correcta)
};

class ResultWindow : public Gtk::Window {
public:
    ResultWindow(const std::vector<Jugador>& jugadores, const std::string& usuarioActual);
    virtual ~ResultWindow();

protected:
    void on_jugador_clicked(const std::string& nombreJugador);  // Muestra detalles del jugador

    Gtk::Box vbox;
    Gtk::TreeView treeview;
    Glib::RefPtr<Gtk::ListStore> liststore;

    std::vector<Jugador> jugadores;
    std::string usuarioActual;
};

#endif

################################################################################



RESUMEN DEL INFORME
================================================================================
Archivos .cpp encontrados: 45
Archivos .hpp encontrados: 39
Otros archivos encontrados (.txt, .md, etc.): 16
Errores de lectura: 0
Tamaño total de archivos leídos: 401065 bytes
Ruta analizada: .
